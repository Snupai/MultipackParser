# Dockerfile for building a Linux ARM64 executable using Nuitka, optimized for build speed

# Stage 1: Build the executable
FROM arm64v8/python:3.12 AS builder

# Install system dependencies and ccache
RUN apt-get update -y && apt-get install -y \
    build-essential \
    libffi-dev \
    libssl-dev \
    wget \
    patchelf \
    libdbus-1-3 \
    libxkbcommon0 \
    libwayland-client0 \
    libwayland-cursor0 \
    libwayland-egl1 \
    libxcb-keysyms1 \
    libxcb-shape0 \
    libxcb-xfixes0 \
    libxcb-xkb1 \
    libxcb-sync1 \
    libxcb-randr0 \
    libxcb-render-util0 \
    libxcb-cursor0 \
    libxcb-icccm4 \
    libxcb-image0 \
    libxcb-glx0 \
    ccache \
    && apt-get clean

# Set up ccache and BuildKit cache mount
ENV PATH="/usr/lib/ccache:$PATH"
ENV CCACHE_DIR="/ccache"
RUN mkdir -p /ccache

# Only copy requirements first for better cache usage
COPY requirements.txt ./

# Install Python dependencies (cacheable layer)
RUN pip install --upgrade pip && pip install -r requirements.txt

# Install Nuitka and ensure setuptools is up-to-date
RUN pip install --upgrade pip setuptools wheel
RUN pip install "nuitka==1.8.7"

# Set the working directory in the container
WORKDIR /app

# Now copy the rest of the project (this layer changes most often)
COPY . .

# Create output directory
RUN mkdir -p ./dist/MultipackParser

# Build the executable using Nuitka with --onefile
RUN --mount=type=cache,target=/ccache \
    nuitka \
    --onefile \
    --show-progress \
    --lto=no \
    --jobs=$(nproc) \
    --remove-output \
    --output-dir=./dist/MultipackParser \
    --output-filename=MultipackParser \
    --include-package=matplotlib \
    --include-package=numpy \
    --include-package=pygame \
    --include-package=PIL \
    --include-package=cryptography \
    --include-package=PySide6 \
    main.py

# Stage 2: Copy the single executable to a minimal base image
FROM arm64v8/python:3.12-slim

WORKDIR /app

# Copy only the single executable
COPY --from=builder /app/dist/MultipackParser/MultipackParser /app/MultipackParser

# Set entrypoint to the built executable
ENTRYPOINT ["/app/MultipackParser"] 
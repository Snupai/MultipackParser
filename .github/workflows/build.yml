name: Build Binary
permissions:
  contents: write
on:
  workflow_dispatch:
  push:
    paths:
      - "**.py"
    branches:
      - main

env:
  IMAGE_NAME: multipackparser-builder
  EXECUTABLE_NAME: MultipackParser
  EXECUTABLE_DIR_IN_DOCKER: /app/dist
  EXECUTABLE_PATH_IN_DOCKER: /app/dist/MultipackParser

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker buildx build --platform linux/arm64 -t ${{ env.IMAGE_NAME }} --output type=docker .

      - name: Create container and extract binary
        run: |
          container_id=$(docker create ${{ env.IMAGE_NAME }})
          mkdir -p ./output
          docker cp $container_id:${{ env.EXECUTABLE_PATH_IN_DOCKER }} ./output/${{ env.EXECUTABLE_NAME }}
          docker rm $container_id

      - name: Upload binary to GitHub Actions
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.EXECUTABLE_NAME }}
          path: ./output/${{ env.EXECUTABLE_NAME }}

      - name: Check version and tag
        id: check_version_change
        run: |
          # Get current version from global_vars.py
          CURR_VERSION=$(grep -m 1 "VERSION: str = '" utils/system/core/global_vars.py | cut -d "'" -f 2)
          echo "Current version: $CURR_VERSION"

          # Fetch all tags
          git fetch --tags --force

          # Check if tag exists for current version
          if git tag | grep -q "^v${CURR_VERSION}$"; then
            echo "Tag v${CURR_VERSION} already exists. Skipping release."
            echo "should_continue=false" >> $GITHUB_OUTPUT
          else
            echo "No tag found for version ${CURR_VERSION}. Will create release."
            echo "should_continue=true" >> $GITHUB_OUTPUT
            echo "version=$CURR_VERSION" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Get version
        id: get_version
        if: steps.check_version_change.outputs.should_continue == 'true'
        run: |
          VERSION="${{ steps.check_version_change.outputs.version }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=v${VERSION}" >> $GITHUB_OUTPUT
          echo "release_name=Release v${VERSION}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Fetch all tags
        if: steps.check_version_change.outputs.should_continue == 'true'
        run: git fetch --tags --force

      - name: Get latest tag
        if: steps.check_version_change.outputs.should_continue == 'true'
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Check if tag already exists
        if: steps.check_version_change.outputs.should_continue == 'true'
        id: check_tag
        run: |
          if [ "${{ steps.get_version.outputs.tag_name }}" == "${{ steps.get_latest_tag.outputs.latest_tag }}" ]; then
            echo "Tag ${{ steps.get_version.outputs.tag_name }} already exists. Stopping the workflow."
            exit 1
          fi
        shell: bash

      - name: Release
        if: steps.check_version_change.outputs.should_continue == 'true'
        uses: softprops/action-gh-release@v2.2.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.tag_name }}
          name: ${{ steps.get_version.outputs.release_name }}
          files: ./output/${{ env.EXECUTABLE_NAME }}
          draft: false
          prerelease: false
          generate_release_notes: true
          fail_on_unmatched_files: true
          make_latest: true

name: Build and Release ARM64 Binary

on:
  push:
    branches:
      - dev-more-class-files

jobs:
  build:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '--build')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker build --platform linux/arm64 -t multipackparser-arm64 .
          docker run --rm -v ${{ github.workspace }}:/app multipackparser-arm64 sh -c "cd /app && pyinstaller --name MultipackParser --onefile --windowed main.py"

      - name: Upload binary to GitHub Actions
        uses: actions/upload-artifact@v4
        with:
          name: MultipackParser
          path: dist/MultipackParser

      - name: Extract Tag and Release Name from VERSION
        id: extract
        run: |
          VERSION_LINE=$(grep -m 1 "VERSION=" utils/global_vars.py)
          VERSION=$(echo $VERSION_LINE | cut -d '=' -f 2 | tr -d '[:space:]' | tr -d "'")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=v${VERSION}" >> $GITHUB_OUTPUT
          echo "release_name=Release v${VERSION}" >> $GITHUB_OUTPUT

      - name: Get latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Check if tag already exists
        id: check_tag
        run: |
          if [ "${{ steps.extract.outputs.tag_name }}" == "${{ steps.get_latest_tag.outputs.latest_tag }}" ]; then
            echo "Tag ${{ steps.extract.outputs.tag_name }} already exists. Stopping the workflow."
            exit 1
          fi

      - name: Notify committer if tag exists
        if: always()
        run: |
          if [ "${{ steps.extract.outputs.tag_name }}" == "${{ steps.get_latest_tag.outputs.latest_tag }}" ]; then
            echo "Notify the committer about the existing tag."
          fi

      - name: Create GitHub Release
        id: create_release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.extract.outputs.tag_name }}
          release_name: ${{ steps.extract.outputs.release_name }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        if: success()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/MultipackParser
          asset_name: MultipackParser
          asset_content_type: application/octet-stream

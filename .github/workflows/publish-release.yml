name: Release Binary

on:
  workflow_dispatch:
  #push:
   # branches:
    #  - dev-more-class-files

jobs:
  build-and-extract:
    runs-on: ubuntu-latest
    steps:
      
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set working directory
        run: cd ${{ github.workspace }}
      
      - name: Get version
        run: |
          VERSION_LINE=$(grep -m 1 "VERSION = " utils/global_vars.py || echo "VERSION not found")
          if [[ $VERSION_LINE == *"VERSION not found"* ]]; then
            echo "Error: VERSION not found in global_vars.py"
            exit 1
          fi
          VERSION=$(echo $VERSION_LINE | cut -d "'" -f 2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=v${VERSION}" >> $GITHUB_OUTPUT
          echo "release_name=Release v${VERSION}" >> $GITHUB_OUTPUT
        shell: bash


      - name: Get latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Check if tag already exists
        id: check_tag
        run: |
          if [ "${{ steps.extract.outputs.tag_name }}" == "${{ steps.get_latest_tag.outputs.latest_tag }}" ]; then
            echo "Tag ${{ steps.extract.outputs.tag_name }} already exists. Stopping the workflow."
            exit 1
          fi

      - name: Notify committer if tag exists
        if: always()
        run: |
          if [ "${{ steps.extract.outputs.tag_name }}" == "${{ steps.get_latest_tag.outputs.latest_tag }}" ]; then
            echo "Notify the committer about the existing tag."
          fi

      - name: Create GitHub Release
        id: create_release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.extract.outputs.tag_name }}
          release_name: ${{ steps.extract.outputs.release_name }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        if: success()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./output/MultipackParser
          asset_name: MultipackParser
          asset_content_type: application/octet-stream

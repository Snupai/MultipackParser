[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTableWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTableWidgetItem",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHeaderView",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QCheckBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QCheckBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFormLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFrame",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHeaderView",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QListWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QListWidgetItem",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSizePolicy",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSpinBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStackedWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTabWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTextEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QToolButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTreeView",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QAbstractButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialogButtonBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSizePolicy",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QProgressDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QListWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSplitter",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSplashScreen",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QProgressBar",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QRadioButton",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSpinBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGroupBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFileDialog",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QCompleter",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PySide6.QtWidgets",
        "description": "PySide6.QtWidgets",
        "isExtraImport": true,
        "detail": "PySide6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QRect",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QRect",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QCoreApplication",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QDate",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QDateTime",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QLocale",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QMetaObject",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QPoint",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QRect",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QTime",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QCoreApplication",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QDate",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QDateTime",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QLocale",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QMetaObject",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QPoint",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QRect",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QTime",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QLocale",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSettings",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QProcess",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QFileSystemWatcher",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QStringListModel",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QRegularExpression",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Signal",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QGuiApplication",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QGuiApplication",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QBrush",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QConicalGradient",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QCursor",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFontDatabase",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QGradient",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QImage",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QKeySequence",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QLinearGradient",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPalette",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QRadialGradient",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QTransform",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QBrush",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QConicalGradient",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QCursor",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFontDatabase",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QGradient",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QImage",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QKeySequence",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QLinearGradient",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPalette",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QRadialGradient",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QTransform",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIntValidator",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QDoubleValidator",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QRegularExpressionValidator",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QRegularExpressionValidator",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIntValidator",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NoReturn",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "MessageType",
        "importPath": "utils.message",
        "description": "utils.message",
        "isExtraImport": true,
        "detail": "utils.message",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "utils.message",
        "description": "utils.message",
        "isExtraImport": true,
        "detail": "utils.message",
        "documentation": {}
    },
    {
        "label": "MessageType",
        "importPath": "utils.message",
        "description": "utils.message",
        "isExtraImport": true,
        "detail": "utils.message",
        "documentation": {}
    },
    {
        "label": "MessageType",
        "importPath": "utils.message",
        "description": "utils.message",
        "isExtraImport": true,
        "detail": "utils.message",
        "documentation": {}
    },
    {
        "label": "MessageType",
        "importPath": "utils.message",
        "description": "utils.message",
        "isExtraImport": true,
        "detail": "utils.message",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "utils.message",
        "description": "utils.message",
        "isExtraImport": true,
        "detail": "utils.message",
        "documentation": {}
    },
    {
        "label": "global_vars",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "global_vars",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "global_vars",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "global_vars",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "global_vars",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "global_vars",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "global_vars",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "global_vars",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "global_vars",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "UR_Common_functions",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "UR10_Server_functions",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "UR20_Server_functions",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "global_vars",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "global_vars",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "global_vars",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "global_vars",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "global_vars",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "Ui_Dialog",
        "importPath": "ui_files.ui_password_entry",
        "description": "ui_files.ui_password_entry",
        "isExtraImport": true,
        "detail": "ui_files.ui_password_entry",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "matplotlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib",
        "description": "matplotlib",
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "FigureCanvasQTAgg",
        "importPath": "matplotlib.backends.backend_qtagg",
        "description": "matplotlib.backends.backend_qtagg",
        "isExtraImport": true,
        "detail": "matplotlib.backends.backend_qtagg",
        "documentation": {}
    },
    {
        "label": "Figure",
        "importPath": "matplotlib.figure",
        "description": "matplotlib.figure",
        "isExtraImport": true,
        "detail": "matplotlib.figure",
        "documentation": {}
    },
    {
        "label": "Poly3DCollection",
        "importPath": "mpl_toolkits.mplot3d.art3d",
        "description": "mpl_toolkits.mplot3d.art3d",
        "isExtraImport": true,
        "detail": "mpl_toolkits.mplot3d.art3d",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "utils.pallet_data",
        "description": "utils.pallet_data",
        "isExtraImport": true,
        "detail": "utils.pallet_data",
        "documentation": {}
    },
    {
        "label": "load_wordlist",
        "importPath": "utils.robot_control",
        "description": "utils.robot_control",
        "isExtraImport": true,
        "detail": "utils.robot_control",
        "documentation": {}
    },
    {
        "label": "load_rob_files",
        "importPath": "utils.robot_control",
        "description": "utils.robot_control",
        "isExtraImport": true,
        "detail": "utils.robot_control",
        "documentation": {}
    },
    {
        "label": "display_selected_file",
        "importPath": "utils.robot_control",
        "description": "utils.robot_control",
        "isExtraImport": true,
        "detail": "utils.robot_control",
        "documentation": {}
    },
    {
        "label": "load",
        "importPath": "utils.robot_control",
        "description": "utils.robot_control",
        "isExtraImport": true,
        "detail": "utils.robot_control",
        "documentation": {}
    },
    {
        "label": "send_cmd_play",
        "importPath": "utils.robot_control",
        "description": "utils.robot_control",
        "isExtraImport": true,
        "detail": "utils.robot_control",
        "documentation": {}
    },
    {
        "label": "send_cmd_pause",
        "importPath": "utils.robot_control",
        "description": "utils.robot_control",
        "isExtraImport": true,
        "detail": "utils.robot_control",
        "documentation": {}
    },
    {
        "label": "send_cmd_stop",
        "importPath": "utils.robot_control",
        "description": "utils.robot_control",
        "isExtraImport": true,
        "detail": "utils.robot_control",
        "documentation": {}
    },
    {
        "label": "load_selected_file",
        "importPath": "utils.robot_control",
        "description": "utils.robot_control",
        "isExtraImport": true,
        "detail": "utils.robot_control",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "set_settings_line_edits",
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "isExtraImport": true,
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "update_status_label",
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "isExtraImport": true,
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "CustomDoubleValidator",
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "isExtraImport": true,
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "update_status_label",
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "isExtraImport": true,
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "handle_scanner_status",
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "isExtraImport": true,
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "set_wordlist",
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "isExtraImport": true,
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "open_page",
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "isExtraImport": true,
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "isExtraImport": true,
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "open_password_dialog",
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "isExtraImport": true,
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "leave_settings_page",
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "isExtraImport": true,
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "open_file",
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "isExtraImport": true,
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "save_open_file",
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "isExtraImport": true,
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "execute_command",
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "isExtraImport": true,
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "open_folder_dialog",
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "isExtraImport": true,
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "open_file_dialog",
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "isExtraImport": true,
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "set_settings_line_edits",
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "isExtraImport": true,
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "check_key_or_password",
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "isExtraImport": true,
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "update_status_label",
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "isExtraImport": true,
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "show_instant_splash",
        "importPath": "utils.app_control",
        "description": "utils.app_control",
        "isExtraImport": true,
        "detail": "utils.app_control",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "importPath": "utils.app_control",
        "description": "utils.app_control",
        "isExtraImport": true,
        "detail": "utils.app_control",
        "documentation": {}
    },
    {
        "label": "exception_handler",
        "importPath": "utils.app_control",
        "description": "utils.app_control",
        "isExtraImport": true,
        "detail": "utils.app_control",
        "documentation": {}
    },
    {
        "label": "qt_message_handler",
        "importPath": "utils.app_control",
        "description": "utils.app_control",
        "isExtraImport": true,
        "detail": "utils.app_control",
        "documentation": {}
    },
    {
        "label": "restart_app",
        "importPath": "utils.app_control",
        "description": "utils.app_control",
        "isExtraImport": true,
        "detail": "utils.app_control",
        "documentation": {}
    },
    {
        "label": "exit_app",
        "importPath": "utils.app_control",
        "description": "utils.app_control",
        "isExtraImport": true,
        "detail": "utils.app_control",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "importPath": "utils.app_control",
        "description": "utils.app_control",
        "isExtraImport": true,
        "detail": "utils.app_control",
        "documentation": {}
    },
    {
        "label": "init_settings",
        "importPath": "utils.app_control",
        "description": "utils.app_control",
        "isExtraImport": true,
        "detail": "utils.app_control",
        "documentation": {}
    },
    {
        "label": "show_palette_config_dialog",
        "importPath": "utils.startup_dialogs",
        "description": "utils.startup_dialogs",
        "isExtraImport": true,
        "detail": "utils.startup_dialogs",
        "documentation": {}
    },
    {
        "label": "MessageManager",
        "importPath": "utils.message_manager",
        "description": "utils.message_manager",
        "isExtraImport": true,
        "detail": "utils.message_manager",
        "documentation": {}
    },
    {
        "label": "MessageManager",
        "importPath": "utils.message_manager",
        "description": "utils.message_manager",
        "isExtraImport": true,
        "detail": "utils.message_manager",
        "documentation": {}
    },
    {
        "label": "MessageManager",
        "importPath": "utils.message_manager",
        "description": "utils.message_manager",
        "isExtraImport": true,
        "detail": "utils.message_manager",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "RotatingFileHandler",
        "importPath": "logging.handlers",
        "description": "logging.handlers",
        "isExtraImport": true,
        "detail": "logging.handlers",
        "documentation": {}
    },
    {
        "label": "RotatingFileHandler",
        "importPath": "logging.handlers",
        "description": "logging.handlers",
        "isExtraImport": true,
        "detail": "logging.handlers",
        "documentation": {}
    },
    {
        "label": "multiprocessing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "SimpleXMLRPCServer",
        "importPath": "xmlrpc.server",
        "description": "xmlrpc.server",
        "isExtraImport": true,
        "detail": "xmlrpc.server",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "BlinkingLabel",
        "importPath": "ui_files.BlinkingLabel",
        "description": "ui_files.BlinkingLabel",
        "isExtraImport": true,
        "detail": "ui_files.BlinkingLabel",
        "documentation": {}
    },
    {
        "label": "PasswordEntryDialog",
        "importPath": "ui_files.PasswordDialog",
        "description": "ui_files.PasswordDialog",
        "isExtraImport": true,
        "detail": "ui_files.PasswordDialog",
        "documentation": {}
    },
    {
        "label": "check_any_usb_for_key",
        "importPath": "utils.usb_key_check",
        "description": "utils.usb_key_check",
        "isExtraImport": true,
        "detail": "utils.usb_key_check",
        "documentation": {}
    },
    {
        "label": "Ui_Form",
        "importPath": "ui_files.ui_main_window",
        "description": "ui_files.ui_main_window",
        "isExtraImport": true,
        "detail": "ui_files.ui_main_window",
        "documentation": {}
    },
    {
        "label": "initialize_3d_view",
        "importPath": "ui_files.visualization_3d",
        "description": "ui_files.visualization_3d",
        "isExtraImport": true,
        "detail": "ui_files.visualization_3d",
        "documentation": {}
    },
    {
        "label": "clear_canvas",
        "importPath": "ui_files.visualization_3d",
        "description": "ui_files.visualization_3d",
        "isExtraImport": true,
        "detail": "ui_files.visualization_3d",
        "documentation": {}
    },
    {
        "label": "server_thread",
        "importPath": "utils.server",
        "description": "utils.server",
        "isExtraImport": true,
        "detail": "utils.server",
        "documentation": {}
    },
    {
        "label": "server_stop",
        "importPath": "utils.server",
        "description": "utils.server",
        "isExtraImport": true,
        "detail": "utils.server",
        "documentation": {}
    },
    {
        "label": "spawn_play_stepback_warning_thread",
        "importPath": "utils.audio",
        "description": "utils.audio",
        "isExtraImport": true,
        "detail": "utils.audio",
        "documentation": {}
    },
    {
        "label": "kill_play_stepback_warning_thread",
        "importPath": "utils.audio",
        "description": "utils.audio",
        "isExtraImport": true,
        "detail": "utils.audio",
        "documentation": {}
    },
    {
        "label": "set_audio_volume",
        "importPath": "utils.audio",
        "description": "utils.audio",
        "isExtraImport": true,
        "detail": "utils.audio",
        "documentation": {}
    },
    {
        "label": "delay_warning_sound",
        "importPath": "utils.audio",
        "description": "utils.audio",
        "isExtraImport": true,
        "detail": "utils.audio",
        "documentation": {}
    },
    {
        "label": "check_for_updates",
        "importPath": "utils.updater",
        "description": "utils.updater",
        "isExtraImport": true,
        "detail": "utils.updater",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "Fernet",
        "importPath": "cryptography.fernet",
        "description": "cryptography.fernet",
        "isExtraImport": true,
        "detail": "cryptography.fernet",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "ctypes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ctypes",
        "description": "ctypes",
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "MainWindowResources_rc",
        "importPath": "ui_files",
        "description": "ui_files",
        "isExtraImport": true,
        "detail": "ui_files",
        "documentation": {}
    },
    {
        "label": "QQmlApplicationEngine",
        "importPath": "PySide6.QtQml",
        "description": "PySide6.QtQml",
        "isExtraImport": true,
        "detail": "PySide6.QtQml",
        "documentation": {}
    },
    {
        "label": "QQuickView",
        "importPath": "PySide6.QtQuick",
        "description": "PySide6.QtQuick",
        "isExtraImport": true,
        "detail": "PySide6.QtQuick",
        "documentation": {}
    },
    {
        "label": "parse_arguments",
        "importPath": "utils.app_initialization",
        "description": "utils.app_initialization",
        "isExtraImport": true,
        "detail": "utils.app_initialization",
        "documentation": {}
    },
    {
        "label": "initialize_app",
        "importPath": "utils.app_initialization",
        "description": "utils.app_initialization",
        "isExtraImport": true,
        "detail": "utils.app_initialization",
        "documentation": {}
    },
    {
        "label": "setup_initial_app_state",
        "importPath": "utils.app_initialization",
        "description": "utils.app_initialization",
        "isExtraImport": true,
        "detail": "utils.app_initialization",
        "documentation": {}
    },
    {
        "label": "initialize_main_window",
        "importPath": "utils.ui_setup",
        "description": "utils.ui_setup",
        "isExtraImport": true,
        "detail": "utils.ui_setup",
        "documentation": {}
    },
    {
        "label": "setup_input_validation",
        "importPath": "utils.ui_setup",
        "description": "utils.ui_setup",
        "isExtraImport": true,
        "detail": "utils.ui_setup",
        "documentation": {}
    },
    {
        "label": "connect_signal_handlers",
        "importPath": "utils.ui_setup",
        "description": "utils.ui_setup",
        "isExtraImport": true,
        "detail": "utils.ui_setup",
        "documentation": {}
    },
    {
        "label": "setup_password_handling",
        "importPath": "utils.ui_setup",
        "description": "utils.ui_setup",
        "isExtraImport": true,
        "detail": "utils.ui_setup",
        "documentation": {}
    },
    {
        "label": "setup_components",
        "importPath": "utils.ui_setup",
        "description": "utils.ui_setup",
        "isExtraImport": true,
        "detail": "utils.ui_setup",
        "documentation": {}
    },
    {
        "label": "start_background_tasks",
        "importPath": "utils.ui_setup",
        "description": "utils.ui_setup",
        "isExtraImport": true,
        "detail": "utils.ui_setup",
        "documentation": {}
    },
    {
        "label": "setup_window_handling",
        "importPath": "utils.ui_setup",
        "description": "utils.ui_setup",
        "isExtraImport": true,
        "detail": "utils.ui_setup",
        "documentation": {}
    },
    {
        "label": "os.environ[\"QT_IM_MODULE\"]",
        "kind": 5,
        "importPath": "hooks.runtime_hook",
        "description": "hooks.runtime_hook",
        "peekOfCode": "os.environ[\"QT_IM_MODULE\"] = \"qtvirtualkeyboard\"\n# Inform the user about the environment setup\nprint(\"PyInstaller runtime hook: Setting QT_IM_MODULE=qtvirtualkeyboard\")\n# Ensure Qt plugins are found by setting the necessary paths\nif getattr(sys, 'frozen', False):\n    try:\n        # Running as PyInstaller bundled app\n        bundle_dir = sys._MEIPASS\n        # Set up PySide6 plugin paths\n        plugins_dir = os.path.join(bundle_dir, 'PySide6', 'plugins')",
        "detail": "hooks.runtime_hook",
        "documentation": {}
    },
    {
        "label": "BlinkingLabel",
        "kind": 6,
        "importPath": "ui_files.BlinkingLabel",
        "description": "ui_files.BlinkingLabel",
        "peekOfCode": "class BlinkingLabel(QLabel):\n    \"\"\"BlinkingLabel class.\n    Args:\n        QLabel (QLabel): The parent class of the BlinkingLabel\n    \"\"\"\n    def __init__(self, text: str, color: str, geometry: QRect, parent=None, \n                 second_color: Optional[str] = None, \n                 font: Optional[QFont] = None,\n                 alignment: Optional[Qt.AlignmentFlag] = None) -> None:\n        \"\"\"Initialize the BlinkingLabel.",
        "detail": "ui_files.BlinkingLabel",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ui_files.BlinkingLabel",
        "description": "ui_files.BlinkingLabel",
        "peekOfCode": "logger = global_vars.logger\nclass BlinkingLabel(QLabel):\n    \"\"\"BlinkingLabel class.\n    Args:\n        QLabel (QLabel): The parent class of the BlinkingLabel\n    \"\"\"\n    def __init__(self, text: str, color: str, geometry: QRect, parent=None, \n                 second_color: Optional[str] = None, \n                 font: Optional[QFont] = None,\n                 alignment: Optional[Qt.AlignmentFlag] = None) -> None:",
        "detail": "ui_files.BlinkingLabel",
        "documentation": {}
    },
    {
        "label": "qInitResources",
        "kind": 2,
        "importPath": "ui_files.MainWindowResources_rc",
        "description": "ui_files.MainWindowResources_rc",
        "peekOfCode": "def qInitResources():\n    QtCore.qRegisterResourceData(0x03, qt_resource_struct, qt_resource_name, qt_resource_data)\ndef qCleanupResources():\n    QtCore.qUnregisterResourceData(0x03, qt_resource_struct, qt_resource_name, qt_resource_data)\nqInitResources()",
        "detail": "ui_files.MainWindowResources_rc",
        "documentation": {}
    },
    {
        "label": "qCleanupResources",
        "kind": 2,
        "importPath": "ui_files.MainWindowResources_rc",
        "description": "ui_files.MainWindowResources_rc",
        "peekOfCode": "def qCleanupResources():\n    QtCore.qUnregisterResourceData(0x03, qt_resource_struct, qt_resource_name, qt_resource_data)\nqInitResources()",
        "detail": "ui_files.MainWindowResources_rc",
        "documentation": {}
    },
    {
        "label": "qt_resource_data",
        "kind": 5,
        "importPath": "ui_files.MainWindowResources_rc",
        "description": "ui_files.MainWindowResources_rc",
        "peekOfCode": "qt_resource_data = b\"\\\n\\x00\\x00\\x91J\\\n\\x89\\\nPNG\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0dIHDR\\x00\\\n\\x00\\x00\\xfa\\x00\\x00\\x00\\xfa\\x08\\x06\\x00\\x00\\x00\\x88\\xecZ=\\\n\\x00\\x00\\x00\\x04gAMA\\x00\\x00\\xb1\\x8f\\x0b\\xfca\\x05\\\n\\x00\\x00\\x00 cHRM\\x00\\x00z&\\x00\\x00\\x80\\x84\\\n\\x00\\x00\\xfa\\x00\\x00\\x00\\x80\\xe8\\x00\\x00u0\\x00\\x00\\xea`\\\n\\x00\\x00:\\x98\\x00\\x00\\x17p\\x9c\\xbaQ<\\x00\\x00\\x00\\x06\\\nbKGD\\x00\\xff\\x00\\xff\\x00\\xff\\xa0\\xbd\\xa7\\x93\\x00\\x00\\",
        "detail": "ui_files.MainWindowResources_rc",
        "documentation": {}
    },
    {
        "label": "qt_resource_name",
        "kind": 5,
        "importPath": "ui_files.MainWindowResources_rc",
        "description": "ui_files.MainWindowResources_rc",
        "peekOfCode": "qt_resource_name = b\"\\\n\\x00\\x05\\\n\\x00ZlD\\\n\\x00S\\\n\\x00o\\x00u\\x00n\\x00d\\\n\\x00\\x0c\\\n\\x07I^\\xe5\\\n\\x00S\\\n\\x00c\\x00a\\x00n\\x00n\\x00e\\x00r\\x00U\\x00R\\x001\\x000\\x00e\\\n\\x00\\x04\\",
        "detail": "ui_files.MainWindowResources_rc",
        "documentation": {}
    },
    {
        "label": "qt_resource_struct",
        "kind": 5,
        "importPath": "ui_files.MainWindowResources_rc",
        "description": "ui_files.MainWindowResources_rc",
        "peekOfCode": "qt_resource_struct = b\"\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\x01\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00R\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x22\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00.\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x1f\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x1c\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00|\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x19\\",
        "detail": "ui_files.MainWindowResources_rc",
        "documentation": {}
    },
    {
        "label": "MessageDialog",
        "kind": 6,
        "importPath": "ui_files.message_dialog",
        "description": "ui_files.message_dialog",
        "peekOfCode": "class MessageDialog(QDialog):\n    \"\"\"Dialog for displaying and acknowledging messages.\n    Args:\n        QDialog (QDialog): The parent class of the message dialog.\n    \"\"\"\n    def __init__(self, messages, parent=None):\n        \"\"\"Initialize the message dialog.\n        Args:\n            messages (list): The list of messages to be displayed.\n            parent (QWidget, optional): The parent widget. Defaults to None.",
        "detail": "ui_files.message_dialog",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ui_files.message_dialog",
        "description": "ui_files.message_dialog",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass MessageDialog(QDialog):\n    \"\"\"Dialog for displaying and acknowledging messages.\n    Args:\n        QDialog (QDialog): The parent class of the message dialog.\n    \"\"\"\n    def __init__(self, messages, parent=None):\n        \"\"\"Initialize the message dialog.\n        Args:\n            messages (list): The list of messages to be displayed.",
        "detail": "ui_files.message_dialog",
        "documentation": {}
    },
    {
        "label": "PasswordEntryDialog",
        "kind": 6,
        "importPath": "ui_files.PasswordDialog",
        "description": "ui_files.PasswordDialog",
        "peekOfCode": "class PasswordEntryDialog(QDialog):\n    \"\"\"Password entry dialog.\n    Args:\n        QDialog (QDialog): The parent class of the password entry dialog.\n    Returns:\n        bool: True if the password was accepted, False otherwise.\n    \"\"\"\n    password_accepted: bool = False\n    ui: Ui_Dialog\n    def __init__(self, parent_window=None) -> None:",
        "detail": "ui_files.PasswordDialog",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ui_files.PasswordDialog",
        "description": "ui_files.PasswordDialog",
        "peekOfCode": "logger = global_vars.logger\n# Define the password entry dialog class\nclass PasswordEntryDialog(QDialog):\n    \"\"\"Password entry dialog.\n    Args:\n        QDialog (QDialog): The parent class of the password entry dialog.\n    Returns:\n        bool: True if the password was accepted, False otherwise.\n    \"\"\"\n    password_accepted: bool = False",
        "detail": "ui_files.PasswordDialog",
        "documentation": {}
    },
    {
        "label": "Ui_Form",
        "kind": 6,
        "importPath": "ui_files.ui_main_window",
        "description": "ui_files.ui_main_window",
        "peekOfCode": "class Ui_Form(object):\n    def setupUi(self, Form):\n        if not Form.objectName():\n            Form.setObjectName(u\"Form\")\n        Form.setWindowModality(Qt.NonModal)\n        Form.resize(1280, 720)\n        Form.setMinimumSize(QSize(1280, 720))\n        Form.setMaximumSize(QSize(1280, 720))\n        palette = QPalette()\n        brush = QBrush(QColor(85, 85, 255, 255))",
        "detail": "ui_files.ui_main_window",
        "documentation": {}
    },
    {
        "label": "Ui_Dialog",
        "kind": 6,
        "importPath": "ui_files.ui_password_entry",
        "description": "ui_files.ui_password_entry",
        "peekOfCode": "class Ui_Dialog(object):\n    def setupUi(self, Dialog):\n        if not Dialog.objectName():\n            Dialog.setObjectName(u\"Dialog\")\n        Dialog.resize(385, 136)\n        self.lineEdit = QLineEdit(Dialog)\n        self.lineEdit.setObjectName(u\"lineEdit\")\n        self.lineEdit.setGeometry(QRect(30, 60, 113, 22))\n        self.lineEdit.setInputMethodHints(Qt.InputMethodHint.ImhHiddenText|Qt.InputMethodHint.ImhNoAutoUppercase|Qt.InputMethodHint.ImhNoPredictiveText|Qt.InputMethodHint.ImhPreferNumbers|Qt.InputMethodHint.ImhSensitiveData)\n        self.lineEdit.setMaxLength(20)",
        "detail": "ui_files.ui_password_entry",
        "documentation": {}
    },
    {
        "label": "MatplotlibCanvas",
        "kind": 6,
        "importPath": "ui_files.visualization_3d",
        "description": "ui_files.visualization_3d",
        "peekOfCode": "class MatplotlibCanvas(FigureCanvas):\n    def __init__(self, parent=None, width=6, height=4, dpi=100):\n        fig = Figure(figsize=(width, height), dpi=dpi)\n        self.ax = fig.add_subplot(111, projection='3d')\n        super().__init__(fig)\n        self.setParent(parent)\n        self.ax.mouse_init(rotate_btn=None, zoom_btn=None)\ndef initialize_3d_view(frame):\n    \"\"\"Initialize the 3D view in the given frame.\n    Args:",
        "detail": "ui_files.visualization_3d",
        "documentation": {}
    },
    {
        "label": "initialize_3d_view",
        "kind": 2,
        "importPath": "ui_files.visualization_3d",
        "description": "ui_files.visualization_3d",
        "peekOfCode": "def initialize_3d_view(frame):\n    \"\"\"Initialize the 3D view in the given frame.\n    Args:\n        frame (QFrame): The frame to initialize the 3D view in.\n    \"\"\"\n    # Create canvas for 3D visualization\n    canvas = MatplotlibCanvas(frame, width=12, height=9, dpi=100)\n    # Set up layout\n    layout = QVBoxLayout(frame)\n    layout.addWidget(canvas)",
        "detail": "ui_files.visualization_3d",
        "documentation": {}
    },
    {
        "label": "clear_canvas",
        "kind": 2,
        "importPath": "ui_files.visualization_3d",
        "description": "ui_files.visualization_3d",
        "peekOfCode": "def clear_canvas(canvas):\n    \"\"\"Clear the matplotlib canvas.\n    Args:\n        canvas (MatplotlibCanvas): The canvas to clear.\n    \"\"\"\n    if not isinstance(canvas, MatplotlibCanvas):\n        return\n    canvas.ax.clear()\n    canvas.ax.set_axis_off()\n    canvas.draw()",
        "detail": "ui_files.visualization_3d",
        "documentation": {}
    },
    {
        "label": "update_palette_list",
        "kind": 2,
        "importPath": "ui_files.visualization_3d",
        "description": "ui_files.visualization_3d",
        "peekOfCode": "def update_palette_list():\n    \"\"\"Update the palette list with current wordlist in robFilesListWidget.\"\"\"\n    if global_vars.ui and hasattr(global_vars.ui, 'robFilesListWidget'):\n        try:\n            from utils.robot_control import load_rob_files\n            load_rob_files()\n            logger.debug(\"Updated robFilesListWidget with current .rob files\")\n        except Exception as e:\n            logger.error(f\"Failed to update robFilesListWidget: {e}\")\ndef calculate_package_centers(center, width, length, rotation, num_packages):",
        "detail": "ui_files.visualization_3d",
        "documentation": {}
    },
    {
        "label": "calculate_package_centers",
        "kind": 2,
        "importPath": "ui_files.visualization_3d",
        "description": "ui_files.visualization_3d",
        "peekOfCode": "def calculate_package_centers(center, width, length, rotation, num_packages):\n    centers = []\n    for i in range(num_packages):\n        if rotation == 0:\n            x = center[0] + (i - (num_packages - 1) / 2) * width\n            y = center[1]\n        elif rotation == 90:\n            x = center[0]\n            y = center[1] + (i - (num_packages - 1) / 2) * width\n        elif rotation == 180:",
        "detail": "ui_files.visualization_3d",
        "documentation": {}
    },
    {
        "label": "parse_rob_file",
        "kind": 2,
        "importPath": "ui_files.visualization_3d",
        "description": "ui_files.visualization_3d",
        "peekOfCode": "def parse_rob_file(file_path) -> Pallet:\n    start_time = time.time()\n    with open(file_path, 'r') as file:\n        lines = file.readlines()\n    package_dimensions = list(map(int, lines[1].strip().split()))\n    package_width, package_length, package_height = package_dimensions[0:3]\n    num_unique_layers = int(lines[2].strip())\n    num_layers = int(lines[3].strip())\n    layer_order = []\n    current_line = 5",
        "detail": "ui_files.visualization_3d",
        "documentation": {}
    },
    {
        "label": "display_pallet_3d",
        "kind": 2,
        "importPath": "ui_files.visualization_3d",
        "description": "ui_files.visualization_3d",
        "peekOfCode": "def display_pallet_3d(canvas, pallet_name):\n    \"\"\"Display a 3D visualization of the pallet.\n    Args:\n        canvas (MatplotlibCanvas): The canvas to draw on\n        pallet (Pallet): The pallet data to visualize\n    \"\"\"\n    # Create and show progress dialog\n    progress = QProgressDialog(\"Rendering 3D visualization...\", None, 0, 100)\n    progress.setWindowModality(Qt.WindowModal)\n    progress.setWindowTitle(\"Loading\")",
        "detail": "ui_files.visualization_3d",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ui_files.visualization_3d",
        "description": "ui_files.visualization_3d",
        "peekOfCode": "logger = global_vars.logger\nclass MatplotlibCanvas(FigureCanvas):\n    def __init__(self, parent=None, width=6, height=4, dpi=100):\n        fig = Figure(figsize=(width, height), dpi=dpi)\n        self.ax = fig.add_subplot(111, projection='3d')\n        super().__init__(fig)\n        self.setParent(parent)\n        self.ax.mouse_init(rotate_btn=None, zoom_btn=None)\ndef initialize_3d_view(frame):\n    \"\"\"Initialize the 3D view in the given frame.",
        "detail": "ui_files.visualization_3d",
        "documentation": {}
    },
    {
        "label": "restart_app",
        "kind": 2,
        "importPath": "utils.app_control",
        "description": "utils.app_control",
        "peekOfCode": "def restart_app():\n    \"\"\"Restart the application.\n    \"\"\"\n    try:\n        global_vars.settings.compare_loaded_settings_to_saved_settings()\n    except ValueError as e:\n        logger.error(f\"Error: {e}\")\n        response = QMessageBox.question(global_vars.main_window, \"Verwerfen oder Speichern\", \n                                            \"Möchten Sie die neuen Daten verwerfen oder speichern?\",\n                                            QMessageBox.StandardButton.Discard | ",
        "detail": "utils.app_control",
        "documentation": {}
    },
    {
        "label": "save_and_exit_app",
        "kind": 2,
        "importPath": "utils.app_control",
        "description": "utils.app_control",
        "peekOfCode": "def save_and_exit_app():\n    \"\"\"Save and exit the application.\n    \"\"\"\n    try:\n        global_vars.settings.compare_loaded_settings_to_saved_settings()\n    except ValueError as e:\n        logger.error(f\"Error: {e}\")\n        # If settings do not match, ask whether to discard or save the new data\n        response = QMessageBox.question(global_vars.main_window, \"Verwerfen oder Speichern\", \n                                            \"Möchten Sie die neuen Daten verwerfen oder speichern?\",",
        "detail": "utils.app_control",
        "documentation": {}
    },
    {
        "label": "exit_app",
        "kind": 2,
        "importPath": "utils.app_control",
        "description": "utils.app_control",
        "peekOfCode": "def exit_app():\n    \"\"\"Exit the application.\n    \"\"\"\n    if hasattr(global_vars, 'server') and global_vars.server:\n        from utils.server import server_stop\n        server_stop()\n    sys.exit(0)\ndef init_settings():\n    \"\"\"Initialize the settings\n    \"\"\"",
        "detail": "utils.app_control",
        "documentation": {}
    },
    {
        "label": "init_settings",
        "kind": 2,
        "importPath": "utils.app_control",
        "description": "utils.app_control",
        "peekOfCode": "def init_settings():\n    \"\"\"Initialize the settings\n    \"\"\"\n    from utils.settings import Settings\n    settings = Settings()\n    global_vars.settings = settings\n    global_vars.PATH_USB_STICK = settings.settings['admin']['path']\n    logger.debug(f\"Settings initialized: {settings}\")\ndef exception_handler(exc_type, exc_value, exc_traceback):\n    \"\"\"Global exception handler to log unhandled exceptions",
        "detail": "utils.app_control",
        "documentation": {}
    },
    {
        "label": "exception_handler",
        "kind": 2,
        "importPath": "utils.app_control",
        "description": "utils.app_control",
        "peekOfCode": "def exception_handler(exc_type, exc_value, exc_traceback):\n    \"\"\"Global exception handler to log unhandled exceptions\n    Args:\n        exc_type (type): The type of the exception.\n        exc_value (Exception): The exception value.\n        exc_traceback (traceback): The traceback of the exception.\n    \"\"\"\n    if issubclass(exc_type, KeyboardInterrupt):\n        # Don't log keyboard interrupt\n        sys.__excepthook__(exc_type, exc_value, exc_traceback)",
        "detail": "utils.app_control",
        "documentation": {}
    },
    {
        "label": "qt_message_handler",
        "kind": 2,
        "importPath": "utils.app_control",
        "description": "utils.app_control",
        "peekOfCode": "def qt_message_handler(mode, context, message):\n    \"\"\"Handler for Qt messages\n    Args:\n        mode (QtCore.QtMsgType): The mode of the message.\n        context (QtCore.QtMsgType): The context of the message.\n        message (str): The message to be logged.\n    \"\"\"\n    from PySide6 import QtCore\n    if mode == QtCore.QtMsgType.QtFatalMsg:\n        logger.critical(f\"Qt Fatal: {message}\")",
        "detail": "utils.app_control",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "kind": 2,
        "importPath": "utils.app_control",
        "description": "utils.app_control",
        "peekOfCode": "def setup_logging(verbose: bool) -> None:\n    \"\"\"Configure logging level based on verbose flag\n    Args:\n        verbose (bool): Whether to enable verbose (DEBUG) logging\n    \"\"\"\n    # Reinitialize the logger with the verbose flag\n    from utils.logging_config import setup_logger\n    # Recreate the logger with the proper verbosity setting\n    new_logger = setup_logger(verbose=verbose)\n    # Update the global logger reference",
        "detail": "utils.app_control",
        "documentation": {}
    },
    {
        "label": "show_instant_splash",
        "kind": 2,
        "importPath": "utils.app_control",
        "description": "utils.app_control",
        "peekOfCode": "def show_instant_splash():\n    \"\"\"Show an instant splash screen before any initialization.\"\"\"\n    import sys\n    from PySide6.QtWidgets import QApplication, QSplashScreen, QLabel\n    from PySide6.QtGui import QPixmap, QPainter, QColor\n    from PySide6.QtCore import Qt\n    # Create minimal QApplication instance just for the splash\n    if not QApplication.instance():\n        temp_app = QApplication(sys.argv)\n    else:",
        "detail": "utils.app_control",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "utils.app_control",
        "description": "utils.app_control",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef restart_app():\n    \"\"\"Restart the application.\n    \"\"\"\n    try:\n        global_vars.settings.compare_loaded_settings_to_saved_settings()\n    except ValueError as e:\n        logger.error(f\"Error: {e}\")\n        response = QMessageBox.question(global_vars.main_window, \"Verwerfen oder Speichern\", \n                                            \"Möchten Sie die neuen Daten verwerfen oder speichern?\",",
        "detail": "utils.app_control",
        "documentation": {}
    },
    {
        "label": "parse_arguments",
        "kind": 2,
        "importPath": "utils.app_initialization",
        "description": "utils.app_initialization",
        "peekOfCode": "def parse_arguments():\n    \"\"\"Parse command line arguments.\n    Returns:\n        argparse.Namespace: Parsed arguments\n    \"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"Multipack Parser Application\",\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        epilog=\"\"\"\nExamples:",
        "detail": "utils.app_initialization",
        "documentation": {}
    },
    {
        "label": "create_splash_screen",
        "kind": 2,
        "importPath": "utils.app_initialization",
        "description": "utils.app_initialization",
        "peekOfCode": "def create_splash_screen(app):\n    \"\"\"Create and show the splash screen.\n    Args:\n        app: QApplication instance\n    Returns:\n        tuple: (splash, progress, loading_label) - The splash screen and its components\n    \"\"\"\n    # Create and show the proper splash screen\n    temp_splash = show_instant_splash()\n    logo_pix = QPixmap(\":/Szaidel Logo/imgs/logoszaidel-transparent-big.png\")",
        "detail": "utils.app_initialization",
        "documentation": {}
    },
    {
        "label": "initialize_app",
        "kind": 2,
        "importPath": "utils.app_initialization",
        "description": "utils.app_initialization",
        "peekOfCode": "def initialize_app():\n    \"\"\"Initialize the application basics.\n    Returns:\n        tuple: (app, splash, progress, loading_label) - The app and splash screen components\n    \"\"\"\n    # Initialize the application\n    app = QApplication.instance() or QApplication(sys.argv)\n    # Create splash screen\n    splash, progress, loading_label = create_splash_screen(app)\n    # Start with initial progress",
        "detail": "utils.app_initialization",
        "documentation": {}
    },
    {
        "label": "setup_initial_app_state",
        "kind": 2,
        "importPath": "utils.app_initialization",
        "description": "utils.app_initialization",
        "peekOfCode": "def setup_initial_app_state():\n    \"\"\"Set up the initial application state.\n    This includes message manager, settings initialization and palette configuration.\n    \"\"\"\n    # Initialize message manager\n    global_vars.message_manager = MessageManager()\n    # Set last restart and number of use cycles\n    global_vars.settings.settings['info']['last_restart'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n    global_vars.settings.settings['info']['number_of_use_cycles'] = str(int(global_vars.settings.settings['info']['number_of_use_cycles']) + 1)\n    global_vars.settings.save_settings()",
        "detail": "utils.app_initialization",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "utils.app_initialization",
        "description": "utils.app_initialization",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef parse_arguments():\n    \"\"\"Parse command line arguments.\n    Returns:\n        argparse.Namespace: Parsed arguments\n    \"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"Multipack Parser Application\",\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        epilog=\"\"\"",
        "detail": "utils.app_initialization",
        "documentation": {}
    },
    {
        "label": "spawn_play_stepback_warning_thread",
        "kind": 2,
        "importPath": "utils.audio",
        "description": "utils.audio",
        "peekOfCode": "def spawn_play_stepback_warning_thread():\n    \"\"\"Spawn a thread to play the stepback warning.\n    \"\"\"\n    global audio_thread\n    logger.info(\"Starting stepback warning audio thread\")\n    global_vars.audio_thread_running = True\n    audio_thread = threading.Thread(target=play_stepback_warning)\n    audio_thread.daemon = True\n    audio_thread.start()\n    global_vars.audio_thread = audio_thread",
        "detail": "utils.audio",
        "documentation": {}
    },
    {
        "label": "kill_play_stepback_warning_thread",
        "kind": 2,
        "importPath": "utils.audio",
        "description": "utils.audio",
        "peekOfCode": "def kill_play_stepback_warning_thread():\n    \"\"\"Kill the thread playing the stepback warning.\n    \"\"\"\n    logger.info(\"Stopping stepback warning audio thread\")\n    global_vars.audio_thread_running = False\n    if global_vars.audio_thread:\n        global_vars.audio_thread = None\ndef play_stepback_warning():\n    \"\"\"Play the stepback warning in a loop using aplay.\n    \"\"\"",
        "detail": "utils.audio",
        "documentation": {}
    },
    {
        "label": "play_stepback_warning",
        "kind": 2,
        "importPath": "utils.audio",
        "description": "utils.audio",
        "peekOfCode": "def play_stepback_warning():\n    \"\"\"Play the stepback warning in a loop using aplay.\n    \"\"\"\n    logger.debug(\"Starting stepback warning playback loop\")\n    try:\n        while global_vars.audio_thread_running:\n            try:\n                # Use aplay to play the audio file\n                logger.debug(f\"Playing audio file: {global_vars.settings.settings['admin']['alarm_sound_file']}\")\n                subprocess.run(['aplay', global_vars.settings.settings['admin']['alarm_sound_file']], ",
        "detail": "utils.audio",
        "documentation": {}
    },
    {
        "label": "set_audio_volume",
        "kind": 2,
        "importPath": "utils.audio",
        "description": "utils.audio",
        "peekOfCode": "def set_audio_volume() -> None:\n    \"\"\"Set the audio volume.\n    \"\"\"\n    if not global_vars.ui:\n        logger.error(\"UI not initialized, cannot set audio volume\")\n        return\n    volume = '0%' if not global_vars.audio_muted else '100%'\n    icon_name = \":/Sound/imgs/volume-off.png\" if not global_vars.audio_muted else \":/Sound/imgs/volume-on.png\"\n    logger.info(f\"Setting audio volume to {volume}\")\n    try:",
        "detail": "utils.audio",
        "documentation": {}
    },
    {
        "label": "delay_warning_sound",
        "kind": 2,
        "importPath": "utils.audio",
        "description": "utils.audio",
        "peekOfCode": "def delay_warning_sound():\n    \"\"\"Delay the warning sound start by 40 seconds.\n    \"\"\"\n    logger.debug(\"Starting delay warning sound monitor\")\n    while True:\n        try:\n            if global_vars.timestamp_scanner_fault:\n                delay = (datetime.now() - global_vars.timestamp_scanner_fault).total_seconds()\n                if delay >= 40:\n                    logger.info(\"40-second delay reached, starting warning sound\")",
        "detail": "utils.audio",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "utils.audio",
        "description": "utils.audio",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef spawn_play_stepback_warning_thread():\n    \"\"\"Spawn a thread to play the stepback warning.\n    \"\"\"\n    global audio_thread\n    logger.info(\"Starting stepback warning audio thread\")\n    global_vars.audio_thread_running = True\n    audio_thread = threading.Thread(target=play_stepback_warning)\n    audio_thread.daemon = True\n    audio_thread.start()",
        "detail": "utils.audio",
        "documentation": {}
    },
    {
        "label": "main_window",
        "kind": 5,
        "importPath": "utils.global_vars",
        "description": "utils.global_vars",
        "peekOfCode": "main_window = None\ncanvas = None\nallow_close = False\n# Variables\nsettings_file: str = 'MultipackParser.conf'\nVERSION: str = '1.5.8'\n# Network settings\nrobot_ip: str = '192.168.0.1'  # DO NOT CHANGE\n# UR20 palette place\nUR20_active_palette: int = 0",
        "detail": "utils.global_vars",
        "documentation": {}
    },
    {
        "label": "canvas",
        "kind": 5,
        "importPath": "utils.global_vars",
        "description": "utils.global_vars",
        "peekOfCode": "canvas = None\nallow_close = False\n# Variables\nsettings_file: str = 'MultipackParser.conf'\nVERSION: str = '1.5.8'\n# Network settings\nrobot_ip: str = '192.168.0.1'  # DO NOT CHANGE\n# UR20 palette place\nUR20_active_palette: int = 0\nUR20_palette1_empty: bool = False",
        "detail": "utils.global_vars",
        "documentation": {}
    },
    {
        "label": "allow_close",
        "kind": 5,
        "importPath": "utils.global_vars",
        "description": "utils.global_vars",
        "peekOfCode": "allow_close = False\n# Variables\nsettings_file: str = 'MultipackParser.conf'\nVERSION: str = '1.5.8'\n# Network settings\nrobot_ip: str = '192.168.0.1'  # DO NOT CHANGE\n# UR20 palette place\nUR20_active_palette: int = 0\nUR20_palette1_empty: bool = False\nUR20_palette2_empty: bool = False",
        "detail": "utils.global_vars",
        "documentation": {}
    },
    {
        "label": "get_log_path",
        "kind": 2,
        "importPath": "utils.logging_config",
        "description": "utils.logging_config",
        "peekOfCode": "def get_log_path() -> str:\n    \"\"\"Get the appropriate log file path whether running as script or frozen exe\"\"\"\n    if getattr(sys, 'frozen', False):\n        # Running as compiled executable\n        base_path = os.path.dirname(sys.executable)\n    else:\n        # Running as script\n        base_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n    # Create logs directory if it doesn't exist\n    logs_dir = os.path.join(base_path, 'logs')",
        "detail": "utils.logging_config",
        "documentation": {}
    },
    {
        "label": "setup_logger",
        "kind": 2,
        "importPath": "utils.logging_config",
        "description": "utils.logging_config",
        "peekOfCode": "def setup_logger(verbose=False) -> logging.Logger:\n    \"\"\"Setup and configure the logger\n    Args:\n        verbose (bool): Whether to enable verbose (DEBUG) logging\n    Returns:\n        logging.Logger: Configured logger instance\n    \"\"\"\n    logger = logging.getLogger('multipack_parser')\n    # Set appropriate log level based on verbose flag\n    log_level = logging.DEBUG if verbose else logging.INFO",
        "detail": "utils.logging_config",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "utils.logging_config",
        "description": "utils.logging_config",
        "peekOfCode": "logger = setup_logger()",
        "detail": "utils.logging_config",
        "documentation": {}
    },
    {
        "label": "MessageType",
        "kind": 6,
        "importPath": "utils.message",
        "description": "utils.message",
        "peekOfCode": "class MessageType(Enum):\n    \"\"\"Enum for the message types.\n    Args:\n        Enum (Enum): The parent class of the message type\n    \"\"\"\n    INFO = \"info\"\n    WARNING = \"warning\" \n    ERROR = \"error\"\nclass Message:\n    \"\"\"Message class.",
        "detail": "utils.message",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "utils.message",
        "description": "utils.message",
        "peekOfCode": "class Message:\n    \"\"\"Message class.\n    \"\"\"\n    def __init__(self, text: str, type: MessageType, timestamp: Optional[datetime] = None):\n        \"\"\"Initialize the message.\n        Args:\n            text (str): The message text\n            type (MessageType): The message type\n            timestamp (Optional[datetime], optional): The timestamp of the message. Defaults to None.\n        \"\"\"",
        "detail": "utils.message",
        "documentation": {}
    },
    {
        "label": "MessageManager",
        "kind": 6,
        "importPath": "utils.message_manager",
        "description": "utils.message_manager",
        "peekOfCode": "class MessageManager:\n    \"\"\"Manager for messages.\n    \"\"\"\n    def __init__(self):\n        \"\"\"Initialize the message manager.\n        \"\"\"\n        logger.debug(\"Initializing MessageManager\")\n        self._messages: List[Message] = []\n        self._active_messages: List[Message] = []\n        self._blocked_messages: Set[str] = set()",
        "detail": "utils.message_manager",
        "documentation": {}
    },
    {
        "label": "Side",
        "kind": 6,
        "importPath": "utils.pallet_data",
        "description": "utils.pallet_data",
        "peekOfCode": "class Side(Enum):\n    top = 1\n    right = 2\n    bottom = 3\n    left = 4\nclass Corner(Enum):\n    top_right = 1\n    bottom_right = 2\n    bottom_left = 3\n    top_left = 4",
        "detail": "utils.pallet_data",
        "documentation": {}
    },
    {
        "label": "Corner",
        "kind": 6,
        "importPath": "utils.pallet_data",
        "description": "utils.pallet_data",
        "peekOfCode": "class Corner(Enum):\n    top_right = 1\n    bottom_right = 2\n    bottom_left = 3\n    top_left = 4\nclass Rotation(Enum):\n    zero = 0\n    ninety = 90\n    one_eighty = 180\n    two_seventy = 270",
        "detail": "utils.pallet_data",
        "documentation": {}
    },
    {
        "label": "Rotation",
        "kind": 6,
        "importPath": "utils.pallet_data",
        "description": "utils.pallet_data",
        "peekOfCode": "class Rotation(Enum):\n    zero = 0\n    ninety = 90\n    one_eighty = 180\n    two_seventy = 270\nclass Rectangle:\n    def __init__(self, width: int, length: int, x: int, y: int) -> None:\n        self.width: int = width\n        self.length: int = length\n        self.x: int = x",
        "detail": "utils.pallet_data",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "utils.pallet_data",
        "description": "utils.pallet_data",
        "peekOfCode": "class Rectangle:\n    def __init__(self, width: int, length: int, x: int, y: int) -> None:\n        self.width: int = width\n        self.length: int = length\n        self.x: int = x\n        self.y: int = y\nclass Box:\n    def __init__(self, blueNumber: int, blueLine: Union[Side, Corner, None], rotation: Rotation, rect: Rectangle, height: int) -> None:\n        self.blueNumber: int = blueNumber\n        self.blueLine: Union[Side, Corner, None] = blueLine",
        "detail": "utils.pallet_data",
        "documentation": {}
    },
    {
        "label": "Box",
        "kind": 6,
        "importPath": "utils.pallet_data",
        "description": "utils.pallet_data",
        "peekOfCode": "class Box:\n    def __init__(self, blueNumber: int, blueLine: Union[Side, Corner, None], rotation: Rotation, rect: Rectangle, height: int) -> None:\n        self.blueNumber: int = blueNumber\n        self.blueLine: Union[Side, Corner, None] = blueLine\n        self.rotation: Rotation = rotation\n        self.rect: Rectangle = rect\n        self.height: int = height\nclass Layer:\n    def __init__(self, unique_layer_id: int, boxes: List[Box]) -> None:\n        self.unique_layer_id: int = unique_layer_id",
        "detail": "utils.pallet_data",
        "documentation": {}
    },
    {
        "label": "Layer",
        "kind": 6,
        "importPath": "utils.pallet_data",
        "description": "utils.pallet_data",
        "peekOfCode": "class Layer:\n    def __init__(self, unique_layer_id: int, boxes: List[Box]) -> None:\n        self.unique_layer_id: int = unique_layer_id\n        self.boxes: List[Box] = boxes\nclass Pallet:\n    def __init__(self, layers: List[Layer]):\n        self.layers: List[Layer] = layers\n        self.layer_count: int = len(layers)\n        self.total_boxes: int = sum(map(lambda layer: len(layer.boxes), layers))",
        "detail": "utils.pallet_data",
        "documentation": {}
    },
    {
        "label": "Pallet",
        "kind": 6,
        "importPath": "utils.pallet_data",
        "description": "utils.pallet_data",
        "peekOfCode": "class Pallet:\n    def __init__(self, layers: List[Layer]):\n        self.layers: List[Layer] = layers\n        self.layer_count: int = len(layers)\n        self.total_boxes: int = sum(map(lambda layer: len(layer.boxes), layers))",
        "detail": "utils.pallet_data",
        "documentation": {}
    },
    {
        "label": "send_cmd_play",
        "kind": 2,
        "importPath": "utils.robot_control",
        "description": "utils.robot_control",
        "peekOfCode": "def send_cmd_play() -> None:\n    \"\"\"Send a command to the robot to start.\n    \"\"\"\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        # Connect the socket to the port where the server is listening\n        server_address = (global_vars.robot_ip, 29999)\n        logger.debug('connecting to %s port %s' %(server_address))\n        sock.connect(server_address)\n        # Send data",
        "detail": "utils.robot_control",
        "documentation": {}
    },
    {
        "label": "send_cmd_pause",
        "kind": 2,
        "importPath": "utils.robot_control",
        "description": "utils.robot_control",
        "peekOfCode": "def send_cmd_pause() -> None:\n    \"\"\"Send a command to the robot to pause.\n    \"\"\"\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        # Connect the socket to the port where the server is listening\n        server_address = (global_vars.robot_ip, 29999)\n        logger.debug('connecting to %s port %s' %(server_address))\n        sock.connect(server_address)\n        # Send data",
        "detail": "utils.robot_control",
        "documentation": {}
    },
    {
        "label": "send_cmd_stop",
        "kind": 2,
        "importPath": "utils.robot_control",
        "description": "utils.robot_control",
        "peekOfCode": "def send_cmd_stop() -> None:\n    \"\"\"Send a command to the robot to stop.\n    \"\"\"\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        # Connect the socket to the port where the server is listening\n        server_address = (global_vars.robot_ip, 29999)\n        logger.debug('connecting to %s port %s' %(server_address))\n        sock.connect(server_address)\n        # Send data",
        "detail": "utils.robot_control",
        "documentation": {}
    },
    {
        "label": "load",
        "kind": 2,
        "importPath": "utils.robot_control",
        "description": "utils.robot_control",
        "peekOfCode": "def load() -> None:\n    \"\"\"Load the pallet plan from file.\n    \"\"\"\n    if not global_vars.ui or not hasattr(global_vars.ui, 'EingabePallettenplan'):\n        logger.error(\"UI not initialized\")\n        return\n    from utils.ui_helpers import update_status_label\n    from utils import UR_Common_functions as UR\n    # Store the text first, then manually clear focus to avoid keyboard issues\n    Artikelnummer = global_vars.ui.EingabePallettenplan.text()",
        "detail": "utils.robot_control",
        "documentation": {}
    },
    {
        "label": "load_wordlist",
        "kind": 2,
        "importPath": "utils.robot_control",
        "description": "utils.robot_control",
        "peekOfCode": "def load_wordlist() -> list:\n    \"\"\"Load the wordlist from the USB stick.\n    Returns:\n        list: A list of wordlist items.\n    \"\"\"\n    import os\n    wordlist = []\n    count = 0\n    for file in os.listdir(global_vars.PATH_USB_STICK):\n        if file.endswith(\".rob\"):",
        "detail": "utils.robot_control",
        "documentation": {}
    },
    {
        "label": "load_rob_files",
        "kind": 2,
        "importPath": "utils.robot_control",
        "description": "utils.robot_control",
        "peekOfCode": "def load_rob_files():\n    \"\"\"Load .rob files into the list widget.\"\"\"\n    import os\n    if not global_vars.ui:\n        return\n    global_vars.ui.robFilesListWidget.clear()\n    rob_files = []\n    for file in os.listdir(global_vars.PATH_USB_STICK):\n        if file.endswith(\".rob\"):\n            rob_files.append(file[:-4])",
        "detail": "utils.robot_control",
        "documentation": {}
    },
    {
        "label": "display_selected_file",
        "kind": 2,
        "importPath": "utils.robot_control",
        "description": "utils.robot_control",
        "peekOfCode": "def display_selected_file(item):\n    \"\"\"Display the selected file in 3D.\n    Args:\n        item (QListWidgetItem): The selected item.\n    \"\"\"\n    if not hasattr(global_vars, 'canvas') or not global_vars.canvas:\n        logger.error(\"No canvas available for 3D visualization\")\n        return\n    try:\n        from ui_files.visualization_3d import display_pallet_3d",
        "detail": "utils.robot_control",
        "documentation": {}
    },
    {
        "label": "load_selected_file",
        "kind": 2,
        "importPath": "utils.robot_control",
        "description": "utils.robot_control",
        "peekOfCode": "def load_selected_file():\n    \"\"\"Load the currently selected file from the robFilesListWidget.\n    This function gets the currently selected item from the robFilesListWidget,\n    sets its text as the value of the EingabePallettenplan input field,\n    and then calls the load() function to load the palette plan.\n    \"\"\"\n    if not global_vars.ui:\n        logger.error(\"UI not initialized\")\n        return\n    # Get the selected item from the list widget",
        "detail": "utils.robot_control",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "utils.robot_control",
        "description": "utils.robot_control",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef send_cmd_play() -> None:\n    \"\"\"Send a command to the robot to start.\n    \"\"\"\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        # Connect the socket to the port where the server is listening\n        server_address = (global_vars.robot_ip, 29999)\n        logger.debug('connecting to %s port %s' %(server_address))\n        sock.connect(server_address)",
        "detail": "utils.robot_control",
        "documentation": {}
    },
    {
        "label": "server_start",
        "kind": 2,
        "importPath": "utils.server",
        "description": "utils.server",
        "peekOfCode": "def server_start() -> Literal[0]:\n    \"\"\"Start the XMLRPC server.\n    Returns:\n        Literal[0]: The exit code of the application.\n    \"\"\"\n    global server\n    server = SimpleXMLRPCServer((\"\", 8080), allow_none=True)\n    logger.debug(\"Start Server\")\n    try:\n        # Get settings from global vars",
        "detail": "utils.server",
        "documentation": {}
    },
    {
        "label": "server_stop",
        "kind": 2,
        "importPath": "utils.server",
        "description": "utils.server",
        "peekOfCode": "def server_stop() -> None:\n    \"\"\"Stop the XMLRPC server.\n    \"\"\"\n    global server\n    if server:\n        if global_vars.ui and global_vars.ui.ButtonStopRPCServer:\n            global_vars.ui.ButtonStopRPCServer.setEnabled(False)\n        server.shutdown()\n        logger.debug(\"Server stopped\")\n        datensenden_manipulation(True, \"Server starten\", \"\")",
        "detail": "utils.server",
        "documentation": {}
    },
    {
        "label": "server_thread",
        "kind": 2,
        "importPath": "utils.server",
        "description": "utils.server",
        "peekOfCode": "def server_thread() -> None:\n    \"\"\"Start the XMLRPC server in a separate thread.\n    \"\"\"\n    logger.debug(\"Starting server thread\")\n    xServerThread = threading.Thread(target=server_start)\n    xServerThread.start()\n    if global_vars.ui and global_vars.ui.ButtonStopRPCServer:\n        global_vars.ui.ButtonStopRPCServer.setEnabled(True)\n    datensenden_manipulation(False, \"Server läuft\", \"green\")\n    if global_vars.message_manager is None:",
        "detail": "utils.server",
        "documentation": {}
    },
    {
        "label": "datensenden_manipulation",
        "kind": 2,
        "importPath": "utils.server",
        "description": "utils.server",
        "peekOfCode": "def datensenden_manipulation(visibility: bool, display_text: str, display_colour: str) -> None:\n    \"\"\"Manipulate the visibility of the \"Daten Senden\" button and the display text.\n    Args:\n        visibility (bool): Whether the \"Daten Senden\" button should be visible.\n        display_text (str): The text to be displayed in the \"Daten Senden\" button.\n        display_colour (str): The colour of the \"Daten Senden\" button.\n    \"\"\"\n    if global_vars.ui:\n        buttons = []\n        if hasattr(global_vars.ui, 'ButtonDatenSenden'):",
        "detail": "utils.server",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "utils.server",
        "description": "utils.server",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Global server instance\nserver = None\ndef server_start() -> Literal[0]:\n    \"\"\"Start the XMLRPC server.\n    Returns:\n        Literal[0]: The exit code of the application.\n    \"\"\"\n    global server\n    server = SimpleXMLRPCServer((\"\", 8080), allow_none=True)",
        "detail": "utils.server",
        "documentation": {}
    },
    {
        "label": "server",
        "kind": 5,
        "importPath": "utils.server",
        "description": "utils.server",
        "peekOfCode": "server = None\ndef server_start() -> Literal[0]:\n    \"\"\"Start the XMLRPC server.\n    Returns:\n        Literal[0]: The exit code of the application.\n    \"\"\"\n    global server\n    server = SimpleXMLRPCServer((\"\", 8080), allow_none=True)\n    logger.debug(\"Start Server\")\n    try:",
        "detail": "utils.server",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "utils.settings",
        "description": "utils.settings",
        "peekOfCode": "class Settings:\n    \"\"\"Settings class.\n    \"\"\"\n    def __init__(self):\n        \"\"\"Initialize the settings with QSettings.\n        \"\"\"\n        logger.debug(\"Initializing Settings\")\n        # Create QSettings instance with organization and application name\n        self.qsettings = QSettings(\"Multipack\", \"MultipackParser\")\n        # Define default settings",
        "detail": "utils.settings",
        "documentation": {}
    },
    {
        "label": "PaletteConfigDialog",
        "kind": 6,
        "importPath": "utils.startup_dialogs",
        "description": "utils.startup_dialogs",
        "peekOfCode": "class PaletteConfigDialog(QDialog):\n    \"\"\"Dialog to configure palettes on startup.\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.setWindowTitle(\"Palette Configuration\")\n        self.setMinimumWidth(600)  # Reduced width\n        self.setMaximumHeight(680)  # Set maximum height for RPi display\n        self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)\n        # Store pixmaps as class variables\n        self.no_palette_pixmap = QPixmap()  # Empty pixmap for no selection",
        "detail": "utils.startup_dialogs",
        "documentation": {}
    },
    {
        "label": "show_palette_config_dialog",
        "kind": 2,
        "importPath": "utils.startup_dialogs",
        "description": "utils.startup_dialogs",
        "peekOfCode": "def show_palette_config_dialog(parent=None):\n    \"\"\"Show the palette configuration dialog and apply settings.\n    Args:\n        parent: Parent widget\n    Returns:\n        bool: True if configuration was successful, False otherwise\n    \"\"\"\n    dialog = PaletteConfigDialog(parent)\n    # Make sure dialog appears in front of main window\n    dialog.setWindowModality(Qt.ApplicationModal)",
        "detail": "utils.startup_dialogs",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "utils.startup_dialogs",
        "description": "utils.startup_dialogs",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass PaletteConfigDialog(QDialog):\n    \"\"\"Dialog to configure palettes on startup.\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.setWindowTitle(\"Palette Configuration\")\n        self.setMinimumWidth(600)  # Reduced width\n        self.setMaximumHeight(680)  # Set maximum height for RPi display\n        self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)\n        # Store pixmaps as class variables",
        "detail": "utils.startup_dialogs",
        "documentation": {}
    },
    {
        "label": "Page",
        "kind": 6,
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "peekOfCode": "class Page(Enum):\n    \"\"\"Enum for the pages.\n    Args:\n        Enum (Enum): The enum for the pages.\n    \"\"\"\n    MAIN_PAGE = 0\n    PARAMETER_PAGE = 1\n    SETTINGS_PAGE = 2\n    EXPERIMENTAL_PAGE = 3\ndef update_status_label(text: str, color: str, blink: bool = False, second_color: Optional[str] = None, instant_acknowledge: bool = False, block: bool = False) -> None:",
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "CustomDoubleValidator",
        "kind": 6,
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "peekOfCode": "class CustomDoubleValidator(QDoubleValidator):\n    \"\"\"Custom double validator that allows commas to be used as decimal separators.\n    Args:\n        QDoubleValidator (QDoubleValidator): The double validator to be used.\n    \"\"\"\n    def validate(self, arg__1: str, arg__2: int) -> object:\n        \"\"\"Validate the input.\n        Args:\n            arg__1 (str): The input to be validated.\n            arg__2 (int): The position of the input.",
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "update_status_label",
        "kind": 2,
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "peekOfCode": "def update_status_label(text: str, color: str, blink: bool = False, second_color: Optional[str] = None, instant_acknowledge: bool = False, block: bool = False) -> None:\n    \"\"\"Update the status label with the given text and color.\n    Args:\n        text (str): The text to be displayed in the status label.\n        color (str): The color of the status label.\n        blink (bool, optional): Whether the status label should blink. Defaults to False.\n        second_color (Optional[str], optional): The second color of the status label. Defaults to None.\n        instant_acknowledge (bool, optional): Whether the status label should be acknowledged immediately. Defaults to False.\n        block (bool, optional): Whether the status label should be blocked. Defaults to False.\n    \"\"\"",
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "open_password_dialog",
        "kind": 2,
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "peekOfCode": "def open_password_dialog() -> None:\n    \"\"\"Open the password dialog.\n    \"\"\"\n    from ui_files.PasswordDialog import PasswordEntryDialog\n    dialog = PasswordEntryDialog(parent_window=global_vars.main_window)\n    if hasattr(dialog, 'ui') and dialog.ui is not None:\n        dialog.show()\n        dialog.ui.lineEdit.setFocus()\n        dialog.exec()\n        if dialog.password_accepted:",
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "check_key_or_password",
        "kind": 2,
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "peekOfCode": "def check_key_or_password() -> None:\n    \"\"\"\n    Checks for a valid USB key on any connected USB drive.\n    If a valid key is found, directly opens the settings page.\n    Otherwise, prompts for password via password dialog.\n    \"\"\"\n    logger.debug(\"Checking for USB key before opening password dialog\")\n    # Try to find a valid key on any connected USB\n    if check_any_usb_for_key():\n        logger.info(\"Valid USB key found - opening settings directly\")",
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "open_page",
        "kind": 2,
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "peekOfCode": "def open_page(page: Page) -> None:\n    \"\"\"Open the specified page.\n    Args:\n        page (Page): The page to be opened.\n    \"\"\"\n    if global_vars.ui and global_vars.ui.stackedWidget:\n        if page == Page.SETTINGS_PAGE:\n            global_vars.settings.reset_unsaved_changes()\n        global_vars.ui.tabWidget.setCurrentIndex(0)            \n        global_vars.ui.stackedWidget.setCurrentIndex(page.value)",
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "open_explorer",
        "kind": 2,
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "peekOfCode": "def open_explorer() -> None:\n    \"\"\"Open the explorer.\n    \"\"\"\n    logger.info(\"Opening explorer\")\n    try:\n        if sys.platform == \"win32\":\n            subprocess.Popen([\"explorer.exe\"])\n        elif sys.platform == \"linux\":\n            # Try different file managers in order of preference\n            file_managers = [\"nautilus\", \"dolphin\", \"thunar\", \"pcmanfm\"]",
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "open_terminal",
        "kind": 2,
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "peekOfCode": "def open_terminal() -> None:\n    \"\"\"Open the terminal.\n    \"\"\"\n    logger.info(\"Opening terminal\")\n    try:\n        if sys.platform == \"win32\":\n            subprocess.Popen([\"start\", \"cmd.exe\"], shell=True)\n        elif sys.platform == \"linux\":\n            # Try different terminals in order of preference\n            terminals = [\"gnome-terminal\", \"konsole\", \"xfce4-terminal\", \"xterm\"]",
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "open_file",
        "kind": 2,
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "peekOfCode": "def open_file() -> None:\n    \"\"\"Open a file.\n    \"\"\"\n    if not global_vars.ui:\n        logger.error(\"UI not initialized\")\n        return\n    file_path, _ = QFileDialog.getOpenFileName(parent=global_vars.main_window, caption=\"Open File\")\n    if not file_path:\n        return\n    global_vars.ui.lineEditFilePath.setText(file_path)",
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "save_open_file",
        "kind": 2,
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "peekOfCode": "def save_open_file() -> None:\n    \"\"\"Save or open a file.\n    \"\"\"\n    if not global_vars.ui:\n        logger.error(\"UI not initialized\")\n        return\n    file_path = global_vars.ui.lineEditFilePath.text()\n    if not file_path:\n        logger.debug(\"No file path specified\")\n        QMessageBox.warning(global_vars.main_window, \"Error\", \"Please select a file to save.\")",
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "execute_command",
        "kind": 2,
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "peekOfCode": "def execute_command() -> None:\n    \"\"\"Execute a command in the console.\n    \"\"\"\n    if not global_vars.ui:\n        logger.error(\"UI not initialized\")\n        return\n    command = global_vars.ui.lineEditCommand.text().strip()\n    # Check if the command starts with \">\"\n    if command.startswith(\"> \"):\n        command = command[2:].strip()",
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "handle_stdout",
        "kind": 2,
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "peekOfCode": "def handle_stdout() -> None:\n    \"\"\"Handle standard output.\n    \"\"\"\n    if not global_vars.ui or not hasattr(global_vars.ui, 'textEditConsole'):\n        logger.error(\"UI not initialized\")\n        return\n    if not isinstance(global_vars.process, QProcess):\n        logger.error(\"Process not initialized or wrong type\")\n        return\n    data = global_vars.process.readAll()  # Use readAll() instead of readAllStandardOutput()",
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "handle_stderr",
        "kind": 2,
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "peekOfCode": "def handle_stderr() -> None:\n    \"\"\"Handle standard error output.\n    \"\"\"\n    if not global_vars.ui or not hasattr(global_vars.ui, 'textEditConsole'):\n        logger.error(\"UI not initialized\")\n        return\n    if not isinstance(global_vars.process, QProcess):\n        logger.error(\"Process not initialized or wrong type\")\n        return\n    data = global_vars.process.readAll()",
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "set_settings_line_edits",
        "kind": 2,
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "peekOfCode": "def set_settings_line_edits() -> None:\n    \"\"\"Set the line edits in the settings page to the current settings.\n    \"\"\"\n    if not global_vars.ui:\n        logger.error(\"UI not initialized\")\n        return\n    settings = global_vars.settings\n    global_vars.ui.lineEditDisplayHeight.setText(str(settings.settings['display']['specs']['height']))\n    global_vars.ui.lineEditDisplayWidth.setText(str(settings.settings['display']['specs']['width']))\n    global_vars.ui.lineEditDisplayRefreshRate.setText(str(int(float(settings.settings['display']['specs']['refresh_rate']))))",
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "leave_settings_page",
        "kind": 2,
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "peekOfCode": "def leave_settings_page():\n    \"\"\"Leave the settings page.\n    \"\"\"\n    try:\n        global_vars.settings.compare_loaded_settings_to_saved_settings()\n    except ValueError as e:\n        logger.error(f\"Error: {e}\")\n        # If settings do not match, ask whether to discard or save the new data\n        response = QMessageBox.question(\n            global_vars.main_window, ",
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "open_folder_dialog",
        "kind": 2,
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "peekOfCode": "def open_folder_dialog():\n    \"\"\"Open the folder dialog.\n    \"\"\"\n    if not global_vars.ui:\n        logger.error(\"UI not initialized\")\n        return\n    # show warning dialog if the user wants to set the path\n    # only if the user acknowledges the warning dialog and the risks then continue with choosing the folder else cancel asap\n    response = QMessageBox.warning(global_vars.main_window, \"Warnung! - Mögliche Risiken!\", \"<b>Möchten Sie den Pfad wirklich ändern?</b><br>Dies könnte zu Problemen führen, wenn bereits ein Palettenplan geladen ist und nach dem Setzen des Pfades nicht ein neuer geladen wird.\", QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)\n    global_vars.main_window.setWindowState(global_vars.main_window.windowState() ^ Qt.WindowState.WindowActive)  # This will make the window blink",
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "open_file_dialog",
        "kind": 2,
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "peekOfCode": "def open_file_dialog() -> None:\n    \"\"\"Open the file dialog.\n    \"\"\"\n    if not global_vars.ui:\n        logger.error(\"UI not initialized\")\n        return\n    file_path = QFileDialog.getOpenFileName(global_vars.main_window, \"Open Audio File\", \"\", \"Audio Files (*.wav)\")\n    if file_path:\n        global_vars.ui.audioPathEdit.setText(file_path[0])\ndef set_wordlist() -> None:",
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "set_wordlist",
        "kind": 2,
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "peekOfCode": "def set_wordlist() -> None:\n    \"\"\"Set the wordlist.\n    \"\"\"\n    if not global_vars.ui:\n        logger.error(\"UI not initialized\")\n        return\n    from utils.robot_control import load_wordlist\n    # Load wordlist and create completer\n    wordlist = load_wordlist()\n    completer = QCompleter(wordlist, global_vars.main_window)",
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "update_wordlist",
        "kind": 2,
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "peekOfCode": "def update_wordlist() -> None:\n    \"\"\"Update the wordlist.\n    \"\"\"\n    from utils.robot_control import load_wordlist\n    new_wordlist = load_wordlist()\n    model = global_vars.completer.model()\n    if not isinstance(model, QStringListModel):\n        # Create new model if current isn't a QStringListModel\n        string_model = QStringListModel(new_wordlist)\n        global_vars.completer.setModel(string_model)",
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "handle_scanner_status",
        "kind": 2,
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "peekOfCode": "def handle_scanner_status(message: str, image_path: str):\n    \"\"\"Handle scanner status updates from server thread\n    Args:\n        message (str): The message from the scanner.\n        image_path (str): The path to the image from the scanner.\n    \"\"\"\n    from PySide6.QtGui import QPixmap\n    logger.debug(f\"Received scanner status - Message: {message}, Image: {image_path}\")\n    if message != \"True,True,True\":\n        logger.warning(\"Scanner detected safety violation\")",
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "utils.ui_helpers",
        "description": "utils.ui_helpers",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass Page(Enum):\n    \"\"\"Enum for the pages.\n    Args:\n        Enum (Enum): The enum for the pages.\n    \"\"\"\n    MAIN_PAGE = 0\n    PARAMETER_PAGE = 1\n    SETTINGS_PAGE = 2\n    EXPERIMENTAL_PAGE = 3",
        "detail": "utils.ui_helpers",
        "documentation": {}
    },
    {
        "label": "initialize_main_window",
        "kind": 2,
        "importPath": "utils.ui_setup",
        "description": "utils.ui_setup",
        "peekOfCode": "def initialize_main_window():\n    \"\"\"Initialize the main window and UI.\n    Returns:\n        QMainWindow: The initialized main window\n    \"\"\"\n    main_window = QMainWindow()\n    main_window.setWindowFlags(Qt.WindowType.FramelessWindowHint)\n    global_vars.main_window = main_window\n    global_vars.ui = Ui_Form()\n    global_vars.ui.setupUi(main_window)",
        "detail": "utils.ui_setup",
        "documentation": {}
    },
    {
        "label": "setup_input_validation",
        "kind": 2,
        "importPath": "utils.ui_setup",
        "description": "utils.ui_setup",
        "peekOfCode": "def setup_input_validation():\n    \"\"\"Set up input validation for UI elements.\"\"\"\n    # Set up input validation\n    regex = QRegularExpression(r\"^[0-9\\-_]*$\")\n    validator = QRegularExpressionValidator(regex)\n    global_vars.ui.EingabePallettenplan.setValidator(validator)\n    # Force numeric keyboard with special number preference\n    global_vars.ui.EingabePallettenplan.setInputMethodHints(\n        Qt.ImhPreferNumbers |  # Prefer numeric keyboard\n        Qt.ImhNoPredictiveText  # Disable predictive text",
        "detail": "utils.ui_setup",
        "documentation": {}
    },
    {
        "label": "connect_signal_handlers",
        "kind": 2,
        "importPath": "utils.ui_setup",
        "description": "utils.ui_setup",
        "peekOfCode": "def connect_signal_handlers():\n    \"\"\"Connect all signal handlers.\"\"\"\n    # Connect main UI signals\n    global_vars.ui.EingabePallettenplan.returnPressed.connect(load)\n    global_vars.ui.openExperimentalTab.clicked.connect(lambda: open_page(Page.EXPERIMENTAL_PAGE))\n    global_vars.ui.ButtonZurueck_8.clicked.connect(lambda: open_page(Page.MAIN_PAGE))\n    global_vars.ui.robFilesListWidget.itemClicked.connect(lambda item: display_selected_file(item))\n    global_vars.ui.deselectRobFile.clicked.connect(lambda: clear_canvas(global_vars.canvas))\n    global_vars.ui.LadePallettenplan_2.clicked.connect(load_selected_file)\n    # Connect all buttons",
        "detail": "utils.ui_setup",
        "documentation": {}
    },
    {
        "label": "setup_password_handling",
        "kind": 2,
        "importPath": "utils.ui_setup",
        "description": "utils.ui_setup",
        "peekOfCode": "def setup_password_handling():\n    \"\"\"Set up password handling functionality.\"\"\"\n    def hash_password(password, salt=None):\n        if salt is None:\n            salt = os.urandom(16)\n        salted_password = salt + password.encode()\n        hashed_password = hashlib.sha256(salted_password).hexdigest()\n        return salt.hex() + '$' + hashed_password\n    global_vars.ui.passwordEdit.textChanged.connect(\n        lambda text: global_vars.settings.settings['admin'].__setitem__('password', hash_password(text)) if text else None",
        "detail": "utils.ui_setup",
        "documentation": {}
    },
    {
        "label": "setup_components",
        "kind": 2,
        "importPath": "utils.ui_setup",
        "description": "utils.ui_setup",
        "peekOfCode": "def setup_components():\n    \"\"\"Initialize and set up the application components.\"\"\"\n    # Initialize components\n    set_wordlist()\n    global_vars.canvas = initialize_3d_view(global_vars.ui.MatplotLibCanvasFrame)\n    load_rob_files()\n    # Set up settings\n    set_settings_line_edits()\n    # Override the keyPressEvent handler for the EingabePallettenplan input field\n    original_key_press = global_vars.ui.EingabePallettenplan.keyPressEvent",
        "detail": "utils.ui_setup",
        "documentation": {}
    },
    {
        "label": "start_background_tasks",
        "kind": 2,
        "importPath": "utils.ui_setup",
        "description": "utils.ui_setup",
        "peekOfCode": "def start_background_tasks():\n    \"\"\"Start background tasks and threads.\"\"\"\n    # Start delay warning sound monitor thread\n    warning_sound_thread = threading.Thread(target=delay_warning_sound)\n    warning_sound_thread.daemon = True\n    warning_sound_thread.start()\ndef setup_window_handling():\n    \"\"\"Set up window close handling and key press events.\"\"\"\n    # Set up window close handling\n    global_vars.allow_close = False",
        "detail": "utils.ui_setup",
        "documentation": {}
    },
    {
        "label": "setup_window_handling",
        "kind": 2,
        "importPath": "utils.ui_setup",
        "description": "utils.ui_setup",
        "peekOfCode": "def setup_window_handling():\n    \"\"\"Set up window close handling and key press events.\"\"\"\n    # Set up window close handling\n    global_vars.allow_close = False\n    def allow_close_event(event):\n        if global_vars.allow_close:\n            event.accept()\n            global_vars.allow_close = False\n        else:\n            event.ignore()",
        "detail": "utils.ui_setup",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "utils.ui_setup",
        "description": "utils.ui_setup",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef initialize_main_window():\n    \"\"\"Initialize the main window and UI.\n    Returns:\n        QMainWindow: The initialized main window\n    \"\"\"\n    main_window = QMainWindow()\n    main_window.setWindowFlags(Qt.WindowType.FramelessWindowHint)\n    global_vars.main_window = main_window\n    global_vars.ui = Ui_Form()",
        "detail": "utils.ui_setup",
        "documentation": {}
    },
    {
        "label": "check_for_updates",
        "kind": 2,
        "importPath": "utils.updater",
        "description": "utils.updater",
        "peekOfCode": "def check_for_updates():\n    \"\"\"Check for updates.\n    \"\"\"    \n    # TODO: Add visual feedback to the user so that they know that the application is checking for updates\n    # disable the main window for interaction\n    global_vars.main_window.setDisabled(True)\n    msg_box = QMessageBox()\n    msg_box.setWindowTitle(\"Update suchen\")\n    msg_box.setText(\"Es wird nach einem Update gesucht.<br>Bitte warten Sie, während der Update-Prozess ausgeführt wird.\")\n    msg_box.setIcon(QMessageBox.Icon.Information)",
        "detail": "utils.updater",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "utils.updater",
        "description": "utils.updater",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef check_for_updates():\n    \"\"\"Check for updates.\n    \"\"\"    \n    # TODO: Add visual feedback to the user so that they know that the application is checking for updates\n    # disable the main window for interaction\n    global_vars.main_window.setDisabled(True)\n    msg_box = QMessageBox()\n    msg_box.setWindowTitle(\"Update suchen\")\n    msg_box.setText(\"Es wird nach einem Update gesucht.<br>Bitte warten Sie, während der Update-Prozess ausgeführt wird.\")",
        "detail": "utils.updater",
        "documentation": {}
    },
    {
        "label": "UR10_scanner1and2niobild",
        "kind": 2,
        "importPath": "utils.UR10_Server_functions",
        "description": "utils.UR10_Server_functions",
        "peekOfCode": "def UR10_scanner1and2niobild() -> None:\n    \"\"\"Set the scanner image.\n    \"\"\"\n    if global_vars.ui and global_vars.ui.label_7:\n        global_vars.ui.label_7.setPixmap(QPixmap(u':/ScannerUR10e/imgs/scanner1&2nio.png'))\n    return\ndef UR10_scanner1bild() -> None:\n    \"\"\"Set the scanner image.\n    \"\"\"\n    if global_vars.ui and global_vars.ui.label_7:",
        "detail": "utils.UR10_Server_functions",
        "documentation": {}
    },
    {
        "label": "UR10_scanner1bild",
        "kind": 2,
        "importPath": "utils.UR10_Server_functions",
        "description": "utils.UR10_Server_functions",
        "peekOfCode": "def UR10_scanner1bild() -> None:\n    \"\"\"Set the scanner image.\n    \"\"\"\n    if global_vars.ui and global_vars.ui.label_7:\n        global_vars.ui.label_7.setPixmap(QPixmap(u':/ScannerUR10e/imgs/scanner1nio.png'))\n    return\ndef UR10_scanner2bild() -> None:\n    \"\"\"Set the scanner image.\n    \"\"\"\n    if global_vars.ui and global_vars.ui.label_7:",
        "detail": "utils.UR10_Server_functions",
        "documentation": {}
    },
    {
        "label": "UR10_scanner2bild",
        "kind": 2,
        "importPath": "utils.UR10_Server_functions",
        "description": "utils.UR10_Server_functions",
        "peekOfCode": "def UR10_scanner2bild() -> None:\n    \"\"\"Set the scanner image.\n    \"\"\"\n    if global_vars.ui and global_vars.ui.label_7:\n        global_vars.ui.label_7.setPixmap(QPixmap(u':/ScannerUR10e/imgs/scanner2nio.png'))\n    return\ndef UR10_scanner1and2iobild() -> None:\n    \"\"\"Set the scanner image.\n    \"\"\"\n    if global_vars.ui and global_vars.ui.label_7:",
        "detail": "utils.UR10_Server_functions",
        "documentation": {}
    },
    {
        "label": "UR10_scanner1and2iobild",
        "kind": 2,
        "importPath": "utils.UR10_Server_functions",
        "description": "utils.UR10_Server_functions",
        "peekOfCode": "def UR10_scanner1and2iobild() -> None:\n    \"\"\"Set the scanner image.\n    \"\"\"\n    if global_vars.ui and global_vars.ui.label_7:\n        global_vars.ui.label_7.setPixmap(QPixmap(u':/ScannerUR10e/imgs/scannerio.png'))\n    return",
        "detail": "utils.UR10_Server_functions",
        "documentation": {}
    },
    {
        "label": "ScannerSignals",
        "kind": 6,
        "importPath": "utils.UR20_Server_functions",
        "description": "utils.UR20_Server_functions",
        "peekOfCode": "class ScannerSignals(QObject):\n    \"\"\"Signals for the scanner.\n    Args:\n        QObject (QObject): The parent class of the signals.\n    \"\"\"\n    status_changed = Signal(str, str)  # status, image_path\nscanner_signals = ScannerSignals()\ndef UR20_scannerStatus(status: str) -> int:\n    \"\"\"Set the scanner status.\n    Args:",
        "detail": "utils.UR20_Server_functions",
        "documentation": {}
    },
    {
        "label": "UR20_scannerStatus",
        "kind": 2,
        "importPath": "utils.UR20_Server_functions",
        "description": "utils.UR20_Server_functions",
        "peekOfCode": "def UR20_scannerStatus(status: str) -> int:\n    \"\"\"Set the scanner status.\n    Args:\n        status (str): The status of the scanner.\n    Returns:\n        int: The exit code of the application.\n    \"\"\"\n    logger.debug(f\"Scanner status update received: {status}\")\n    if not status == \"True,True,True\" and global_vars.timestamp_scanner_fault is None:\n        logger.warning(\"Scanner fault detected\")",
        "detail": "utils.UR20_Server_functions",
        "documentation": {}
    },
    {
        "label": "UR20_SetActivePalette",
        "kind": 2,
        "importPath": "utils.UR20_Server_functions",
        "description": "utils.UR20_Server_functions",
        "peekOfCode": "def UR20_SetActivePalette(pallet_number) -> Union[Literal[0], Literal[1]]:\n    \"\"\"Set the active pallet.\n    Args:\n        pallet_number (int): The number of the pallet to be set as active.\n    Returns:\n        Literal[0] | Literal[1]: 0 if the pallet is not empty, 1 if the pallet is empty.\n    \"\"\"\n    logger.debug(f\"Request to set active palette to {pallet_number}\")\n    if pallet_number == 1 and not global_vars.UR20_palette1_empty:\n        logger.warning(\"Cannot set palette 1 as active - not empty\")",
        "detail": "utils.UR20_Server_functions",
        "documentation": {}
    },
    {
        "label": "UR20_GetActivePaletteNumber",
        "kind": 2,
        "importPath": "utils.UR20_Server_functions",
        "description": "utils.UR20_Server_functions",
        "peekOfCode": "def UR20_GetActivePaletteNumber() -> int:\n    \"\"\"Get the active pallet number.\n    Returns:\n        int: The number of the active pallet.\n    \"\"\"\n    logger.debug(f\"Current active palette: {global_vars.UR20_active_palette}\")\n    return global_vars.UR20_active_palette\n# get pallet status\ndef UR20_GetPaletteStatus(pallet_number) -> Union[Literal[1], Literal[0], Literal[-1]]:\n    \"\"\"Get the status of the given pallet.",
        "detail": "utils.UR20_Server_functions",
        "documentation": {}
    },
    {
        "label": "UR20_GetPaletteStatus",
        "kind": 2,
        "importPath": "utils.UR20_Server_functions",
        "description": "utils.UR20_Server_functions",
        "peekOfCode": "def UR20_GetPaletteStatus(pallet_number) -> Union[Literal[1], Literal[0], Literal[-1]]:\n    \"\"\"Get the status of the given pallet.\n    Returns:\n        Union[Literal[1], Literal[0], Literal[-1]]: 1 if the pallet is empty, 0 if the pallet is full, -1 if the pallet number is invalid.\n    \"\"\"\n    logger.debug(f\"Checking status of palette {pallet_number}\")\n    match pallet_number:\n        case 1:\n            status = 1 if global_vars.UR20_palette1_empty else 0\n            logger.info(f\"Palette 1 status: {'empty' if status else 'not empty'}\")",
        "detail": "utils.UR20_Server_functions",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "utils.UR20_Server_functions",
        "description": "utils.UR20_Server_functions",
        "peekOfCode": "logger = global_vars.logger\nclass ScannerSignals(QObject):\n    \"\"\"Signals for the scanner.\n    Args:\n        QObject (QObject): The parent class of the signals.\n    \"\"\"\n    status_changed = Signal(str, str)  # status, image_path\nscanner_signals = ScannerSignals()\ndef UR20_scannerStatus(status: str) -> int:\n    \"\"\"Set the scanner status.",
        "detail": "utils.UR20_Server_functions",
        "documentation": {}
    },
    {
        "label": "scanner_signals",
        "kind": 5,
        "importPath": "utils.UR20_Server_functions",
        "description": "utils.UR20_Server_functions",
        "peekOfCode": "scanner_signals = ScannerSignals()\ndef UR20_scannerStatus(status: str) -> int:\n    \"\"\"Set the scanner status.\n    Args:\n        status (str): The status of the scanner.\n    Returns:\n        int: The exit code of the application.\n    \"\"\"\n    logger.debug(f\"Scanner status update received: {status}\")\n    if not status == \"True,True,True\" and global_vars.timestamp_scanner_fault is None:",
        "detail": "utils.UR20_Server_functions",
        "documentation": {}
    },
    {
        "label": "UR_SetFileName",
        "kind": 2,
        "importPath": "utils.UR_Common_functions",
        "description": "utils.UR_Common_functions",
        "peekOfCode": "def UR_SetFileName(Artikelnummer) -> str:\n    \"\"\"Set the filename.\n    Args:\n        Artikelnummer (str): The article number.\n    Returns:\n        str: The filename.\n    \"\"\"\n    global_vars.FILENAME = (Artikelnummer + '.rob')\n    logger.debug(f\"{global_vars.FILENAME=}\")\n    return global_vars.FILENAME ",
        "detail": "utils.UR_Common_functions",
        "documentation": {}
    },
    {
        "label": "UR_ReadDataFromUsbStick",
        "kind": 2,
        "importPath": "utils.UR_Common_functions",
        "description": "utils.UR_Common_functions",
        "peekOfCode": "def UR_ReadDataFromUsbStick() -> Union[Literal[0], Literal[1]]:\n    \"\"\"Read data from the Path_USB_STICK.\n    Returns:\n        Union[Literal[0], Literal[1]]: 1 if the data was read successfully, 0 otherwise.\n    \"\"\"\n    global_vars.g_Daten = []\n    global_vars.g_LageZuordnung = []\n    global_vars.g_PaketPos = []\n    global_vars.g_PaketeZuordnung = []\n    global_vars.g_Zwischenlagen = []",
        "detail": "utils.UR_Common_functions",
        "documentation": {}
    },
    {
        "label": "Check_Einzelpaket_längs_greifen",
        "kind": 2,
        "importPath": "utils.UR_Common_functions",
        "description": "utils.UR_Common_functions",
        "peekOfCode": "def Check_Einzelpaket_längs_greifen(package_length: int) -> None:\n    \"\"\"Check if package should be gripped lengthwise.\n    \"\"\"\n    if global_vars.ui and global_vars.ui.checkBoxEinzelpaket:\n        if package_length >= 265:\n            global_vars.ui.checkBoxEinzelpaket.setChecked(True)\n        else:\n            global_vars.ui.checkBoxEinzelpaket.setChecked(False)\n#funktion für den roboter \ndef UR_Palette() -> Optional[List[int]]:",
        "detail": "utils.UR_Common_functions",
        "documentation": {}
    },
    {
        "label": "UR_Palette",
        "kind": 2,
        "importPath": "utils.UR_Common_functions",
        "description": "utils.UR_Common_functions",
        "peekOfCode": "def UR_Palette() -> Optional[List[int]]:\n    \"\"\"Get the palette dimensions.\n    Returns:\n        Optional[List[int]]: The palette dimensions, or None if not available.\n    \"\"\"\n    return global_vars.g_PalettenDim\ndef UR_Karton() -> Optional[List[int]]:\n    \"\"\"Get the carton dimensions.\n    Returns:\n        Optional[List[int]]: The carton dimensions, or None if not available.",
        "detail": "utils.UR_Common_functions",
        "documentation": {}
    },
    {
        "label": "UR_Karton",
        "kind": 2,
        "importPath": "utils.UR_Common_functions",
        "description": "utils.UR_Common_functions",
        "peekOfCode": "def UR_Karton() -> Optional[List[int]]:\n    \"\"\"Get the carton dimensions.\n    Returns:\n        Optional[List[int]]: The carton dimensions, or None if not available.\n    \"\"\"\n    return global_vars.g_PaketDim\ndef UR_Lagen() -> Optional[List[int]]:\n    \"\"\"Get the layer types.\n    Returns:\n        Optional[List[int]]: The layer types, or None if not available.",
        "detail": "utils.UR_Common_functions",
        "documentation": {}
    },
    {
        "label": "UR_Lagen",
        "kind": 2,
        "importPath": "utils.UR_Common_functions",
        "description": "utils.UR_Common_functions",
        "peekOfCode": "def UR_Lagen() -> Optional[List[int]]:\n    \"\"\"Get the layer types.\n    Returns:\n        Optional[List[int]]: The layer types, or None if not available.\n    \"\"\"\n    return global_vars.g_LageZuordnung\ndef UR_Zwischenlagen() -> Optional[List[int]]:\n    \"\"\"Get the number of use cycles.\n    Returns:\n        Optional[List[int]]: The number of use cycles, or None if not available.",
        "detail": "utils.UR_Common_functions",
        "documentation": {}
    },
    {
        "label": "UR_Zwischenlagen",
        "kind": 2,
        "importPath": "utils.UR_Common_functions",
        "description": "utils.UR_Common_functions",
        "peekOfCode": "def UR_Zwischenlagen() -> Optional[List[int]]:\n    \"\"\"Get the number of use cycles.\n    Returns:\n        Optional[List[int]]: The number of use cycles, or None if not available.\n    \"\"\"\n    return global_vars.g_Zwischenlagen\ndef UR_PaketPos(Nummer: int) -> Optional[List[int]]:\n    \"\"\"Get the package position, with coordinate transformation for palette 2.\n    Args:\n        Nummer (int): The package number.",
        "detail": "utils.UR_Common_functions",
        "documentation": {}
    },
    {
        "label": "UR_PaketPos",
        "kind": 2,
        "importPath": "utils.UR_Common_functions",
        "description": "utils.UR_Common_functions",
        "peekOfCode": "def UR_PaketPos(Nummer: int) -> Optional[List[int]]:\n    \"\"\"Get the package position, with coordinate transformation for palette 2.\n    Args:\n        Nummer (int): The package number.\n    Returns:\n        Optional[List[int]]: The package position, or None if not available.\n    \"\"\"\n    if global_vars.g_PaketPos is None:\n        logger.error(\"Package positions not initialized\")\n        return None",
        "detail": "utils.UR_Common_functions",
        "documentation": {}
    },
    {
        "label": "UR_AnzLagen",
        "kind": 2,
        "importPath": "utils.UR_Common_functions",
        "description": "utils.UR_Common_functions",
        "peekOfCode": "def UR_AnzLagen() -> Optional[int]:\n    \"\"\"Get the number of layers.\n    Returns:\n        Optional[int]: The number of layers, or None if not available.\n    \"\"\"\n    return global_vars.g_AnzLagen\ndef UR_AnzPakete() -> Optional[int]:\n    \"\"\"Get the number of packages.\n    Returns:\n        Optional[int]: The number of packages, or None if not available.",
        "detail": "utils.UR_Common_functions",
        "documentation": {}
    },
    {
        "label": "UR_AnzPakete",
        "kind": 2,
        "importPath": "utils.UR_Common_functions",
        "description": "utils.UR_Common_functions",
        "peekOfCode": "def UR_AnzPakete() -> Optional[int]:\n    \"\"\"Get the number of packages.\n    Returns:\n        Optional[int]: The number of packages, or None if not available.\n    \"\"\"\n    return global_vars.g_AnzahlPakete\ndef UR_PaketeZuordnung() -> Optional[List[int]]:\n    \"\"\"Get the package order.\n    Returns:\n        Optional[List[int]]: The package order, or None if not available.",
        "detail": "utils.UR_Common_functions",
        "documentation": {}
    },
    {
        "label": "UR_PaketeZuordnung",
        "kind": 2,
        "importPath": "utils.UR_Common_functions",
        "description": "utils.UR_Common_functions",
        "peekOfCode": "def UR_PaketeZuordnung() -> Optional[List[int]]:\n    \"\"\"Get the package order.\n    Returns:\n        Optional[List[int]]: The package order, or None if not available.\n    \"\"\"\n    return global_vars.g_PaketeZuordnung\n#den \"center of gravity\" messen\ndef UR_CoG(Masse_Paket: float, Masse_Greifer: float, Anzahl_Pakete: int = 1) -> Optional[List[float]]:\n    \"\"\"Calculate the center of gravity.\n    Args:",
        "detail": "utils.UR_Common_functions",
        "documentation": {}
    },
    {
        "label": "UR_CoG",
        "kind": 2,
        "importPath": "utils.UR_Common_functions",
        "description": "utils.UR_Common_functions",
        "peekOfCode": "def UR_CoG(Masse_Paket: float, Masse_Greifer: float, Anzahl_Pakete: int = 1) -> Optional[List[float]]:\n    \"\"\"Calculate the center of gravity.\n    Args:\n        Masse_Paket (float): The mass of the package.\n        Masse_Greifer (float): The mass of the carton.\n        Anzahl_Pakete (int, optional): The number of packages. Defaults to 1.\n    Returns:\n        Optional[List[float]]: The center of gravity, or None if it couldn't be calculated.\n    \"\"\"\n    if global_vars.g_PaketDim is None:",
        "detail": "utils.UR_Common_functions",
        "documentation": {}
    },
    {
        "label": "UR_Paket_hoehe",
        "kind": 2,
        "importPath": "utils.UR_Common_functions",
        "description": "utils.UR_Common_functions",
        "peekOfCode": "def UR_Paket_hoehe() -> int:\n    \"\"\"Set the package height.\n    Returns:\n        int: The package height.\n    \"\"\"\n    if global_vars.g_PaketDim is None:\n        logger.error(\"Package dimensions not initialized\")\n        return 0\n    if global_vars.ui and global_vars.ui.EingabeKartonhoehe:\n        global_vars.g_PaketDim[2] = int(global_vars.ui.EingabeKartonhoehe.text())",
        "detail": "utils.UR_Common_functions",
        "documentation": {}
    },
    {
        "label": "UR_Startlage",
        "kind": 2,
        "importPath": "utils.UR_Common_functions",
        "description": "utils.UR_Common_functions",
        "peekOfCode": "def UR_Startlage() -> int:\n    \"\"\"Set the start layer.\n    Returns:\n        int: The start layer.\n    \"\"\"\n    if global_vars.ui and global_vars.ui.EingabeStartlage:\n        global_vars.g_Startlage = int(global_vars.ui.EingabeStartlage.value())\n        return global_vars.g_Startlage\n    return 0\ndef UR_MasseGeschaetzt() -> float:",
        "detail": "utils.UR_Common_functions",
        "documentation": {}
    },
    {
        "label": "UR_MasseGeschaetzt",
        "kind": 2,
        "importPath": "utils.UR_Common_functions",
        "description": "utils.UR_Common_functions",
        "peekOfCode": "def UR_MasseGeschaetzt() -> float:\n    \"\"\"Set the mass of the carton.\n    Returns:\n        float: The mass of the carton.\n    \"\"\"\n    if global_vars.ui and global_vars.ui.EingabeKartonGewicht:\n        global_vars.g_MassePaket = float(global_vars.ui.EingabeKartonGewicht.text())\n        return global_vars.g_MassePaket\n    return 0.0\ndef UR_PickOffsetX() -> int:",
        "detail": "utils.UR_Common_functions",
        "documentation": {}
    },
    {
        "label": "UR_PickOffsetX",
        "kind": 2,
        "importPath": "utils.UR_Common_functions",
        "description": "utils.UR_Common_functions",
        "peekOfCode": "def UR_PickOffsetX() -> int:\n    \"\"\"Set the pick offset in x direction.\n    Returns:\n        int: The pick offset in x direction.\n    \"\"\"\n    if global_vars.ui and global_vars.ui.EingabeVerschiebungX:\n        global_vars.g_Pick_Offset_X = int(global_vars.ui.EingabeVerschiebungX.value())\n        return global_vars.g_Pick_Offset_X\n    return 0\ndef UR_PickOffsetY() -> int:",
        "detail": "utils.UR_Common_functions",
        "documentation": {}
    },
    {
        "label": "UR_PickOffsetY",
        "kind": 2,
        "importPath": "utils.UR_Common_functions",
        "description": "utils.UR_Common_functions",
        "peekOfCode": "def UR_PickOffsetY() -> int:\n    \"\"\"Set the pick offset in y direction.\n    Returns:\n        int: The pick offset in y direction.\n    \"\"\"\n    if global_vars.ui and global_vars.ui.EingabeVerschiebungY:\n        global_vars.g_Pick_Offset_Y = int(global_vars.ui.EingabeVerschiebungY.value())\n        return global_vars.g_Pick_Offset_Y\n    return 0\ndef UR_Quergreifen() -> bool:",
        "detail": "utils.UR_Common_functions",
        "documentation": {}
    },
    {
        "label": "UR_Quergreifen",
        "kind": 2,
        "importPath": "utils.UR_Common_functions",
        "description": "utils.UR_Common_functions",
        "peekOfCode": "def UR_Quergreifen() -> bool:\n    \"\"\"Query the robot.\n    Returns:\n        bool: True if the robot is queried, False otherwise.\n    \"\"\"\n    if global_vars.ui and global_vars.ui.checkBoxEinzelpaket:\n        logger.debug(f\"{global_vars.ui.checkBoxEinzelpaket.isChecked()=}\")\n        return global_vars.ui.checkBoxEinzelpaket.isChecked()\n    return False",
        "detail": "utils.UR_Common_functions",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "utils.UR_Common_functions",
        "description": "utils.UR_Common_functions",
        "peekOfCode": "logger = global_vars.logger\n#Dateiname abfragen\ndef UR_SetFileName(Artikelnummer) -> str:\n    \"\"\"Set the filename.\n    Args:\n        Artikelnummer (str): The article number.\n    Returns:\n        str: The filename.\n    \"\"\"\n    global_vars.FILENAME = (Artikelnummer + '.rob')",
        "detail": "utils.UR_Common_functions",
        "documentation": {}
    },
    {
        "label": "check_hidden_key",
        "kind": 2,
        "importPath": "utils.usb_key_check",
        "description": "utils.usb_key_check",
        "peekOfCode": "def check_hidden_key(usb_path):\n    # First check for the index file\n    settings = global_vars.settings\n    index_file_path = os.path.join(usb_path, \".keyindex\")\n    if not os.path.exists(index_file_path):\n        return False\n    # Read the key file path from the index\n    try:\n        with open(index_file_path, 'r') as file:\n            relative_key_path = file.read().strip()",
        "detail": "utils.usb_key_check",
        "documentation": {}
    },
    {
        "label": "find_keyindex_files",
        "kind": 2,
        "importPath": "utils.usb_key_check",
        "description": "utils.usb_key_check",
        "peekOfCode": "def find_keyindex_files(base_dir):\n    \"\"\"\n    Recursively search for .keyindex files in all subdirectories\n    Returns a list of directories containing a .keyindex file\n    \"\"\"\n    key_dirs = []\n    try:\n        for root, dirs, files in os.walk(base_dir):\n            if \".keyindex\" in files:\n                key_dirs.append(root)",
        "detail": "utils.usb_key_check",
        "documentation": {}
    },
    {
        "label": "check_any_usb_for_key",
        "kind": 2,
        "importPath": "utils.usb_key_check",
        "description": "utils.usb_key_check",
        "peekOfCode": "def check_any_usb_for_key():\n    \"\"\"\n    Checks all connected USB drives for a valid security key.\n    Returns True if a valid key is found on any drive, False otherwise.\n    \"\"\"\n    # Get all available drives on Windows\n    if os.name == 'nt':  # Windows\n        drives = []\n        bitmask = ctypes.windll.kernel32.GetLogicalDrives()\n        for letter in string.ascii_uppercase:",
        "detail": "utils.usb_key_check",
        "documentation": {}
    },
    {
        "label": "run_command",
        "kind": 2,
        "importPath": "build",
        "description": "build",
        "peekOfCode": "def run_command(command, check=True):\n    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    stdout, stderr = process.communicate()\n    if check and process.returncode != 0:\n        raise Exception(f\"Command failed with error code {process.returncode}:\\n{stderr.decode('utf-8')}\")\n    else:\n        return stdout.decode('utf-8')\ndef build_docker_image():\n    build_command = f\"docker buildx build --platform linux/arm64 -t {IMAGE_NAME} --output type=docker -f {DOCKERFILE_PATH} {PROJECT_DIR}\"\n    print(\"Building Docker image...\")",
        "detail": "build",
        "documentation": {}
    },
    {
        "label": "build_docker_image",
        "kind": 2,
        "importPath": "build",
        "description": "build",
        "peekOfCode": "def build_docker_image():\n    build_command = f\"docker buildx build --platform linux/arm64 -t {IMAGE_NAME} --output type=docker -f {DOCKERFILE_PATH} {PROJECT_DIR}\"\n    print(\"Building Docker image...\")\n    run_command(build_command)\n    print(\"Docker image built successfully.\")\ndef create_container():\n    create_command = f\"docker create {IMAGE_NAME}\"\n    container_id = run_command(create_command).strip()\n    print(f\"Container created with ID: {container_id}\")\n    return container_id",
        "detail": "build",
        "documentation": {}
    },
    {
        "label": "create_container",
        "kind": 2,
        "importPath": "build",
        "description": "build",
        "peekOfCode": "def create_container():\n    create_command = f\"docker create {IMAGE_NAME}\"\n    container_id = run_command(create_command).strip()\n    print(f\"Container created with ID: {container_id}\")\n    return container_id\ndef list_files_in_container():\n    list_command = f\"docker run --rm --platform linux/arm64 {IMAGE_NAME} ls -lR {EXECUTABLE_DIR_IN_DOCKER}\"\n    files_list = run_command(list_command, check=False)\n    print(f\"Files in Docker container {EXECUTABLE_DIR_IN_DOCKER}:\")\n    print(files_list)",
        "detail": "build",
        "documentation": {}
    },
    {
        "label": "list_files_in_container",
        "kind": 2,
        "importPath": "build",
        "description": "build",
        "peekOfCode": "def list_files_in_container():\n    list_command = f\"docker run --rm --platform linux/arm64 {IMAGE_NAME} ls -lR {EXECUTABLE_DIR_IN_DOCKER}\"\n    files_list = run_command(list_command, check=False)\n    print(f\"Files in Docker container {EXECUTABLE_DIR_IN_DOCKER}:\")\n    print(files_list)\ndef copy_executable(container_id):\n    if not os.path.exists(OUTPUT_DIR_ON_HOST):\n        os.makedirs(OUTPUT_DIR_ON_HOST)\n    # List files in the expected directory to debug the error\n    list_files_in_container()",
        "detail": "build",
        "documentation": {}
    },
    {
        "label": "copy_executable",
        "kind": 2,
        "importPath": "build",
        "description": "build",
        "peekOfCode": "def copy_executable(container_id):\n    if not os.path.exists(OUTPUT_DIR_ON_HOST):\n        os.makedirs(OUTPUT_DIR_ON_HOST)\n    # List files in the expected directory to debug the error\n    list_files_in_container()\n    copy_command = f\"docker cp {container_id}:{EXECUTABLE_PATH_IN_DOCKER} {OUTPUT_PATH_ON_HOST}\"\n    print(\"Copying executable from container to host...\")\n    run_command(copy_command)\n    print(f\"Executable copied to: {OUTPUT_PATH_ON_HOST}\")\ndef remove_container(container_id):",
        "detail": "build",
        "documentation": {}
    },
    {
        "label": "remove_container",
        "kind": 2,
        "importPath": "build",
        "description": "build",
        "peekOfCode": "def remove_container(container_id):\n    remove_command = f\"docker rm {container_id}\"\n    print(f\"Removing container {container_id}...\")\n    run_command(remove_command)\n    print(f\"Container {container_id} removed.\")\ndef main():\n    container_id = None  # Initialize container_id to None\n    try:\n        build_docker_image()\n        container_id = create_container()  # Ensure container_id is assigned correctly",
        "detail": "build",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "build",
        "description": "build",
        "peekOfCode": "def main():\n    container_id = None  # Initialize container_id to None\n    try:\n        build_docker_image()\n        container_id = create_container()  # Ensure container_id is assigned correctly\n        copy_executable(container_id)\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n    finally:\n        if container_id:",
        "detail": "build",
        "documentation": {}
    },
    {
        "label": "PROJECT_DIR",
        "kind": 5,
        "importPath": "build",
        "description": "build",
        "peekOfCode": "PROJECT_DIR = pathlib.Path(__file__).parent.resolve()\nDOCKERFILE_PATH = PROJECT_DIR / \"Dockerfile\"\nIMAGE_NAME = \"multipackparser-builder\"\nEXECUTABLE_NAME_IN_DOCKER = \"MultipackParser\"\nEXECUTABLE_DIR_IN_DOCKER  = \"/app/dist\"\nEXECUTABLE_PATH_IN_DOCKER = f\"{EXECUTABLE_DIR_IN_DOCKER}/{EXECUTABLE_NAME_IN_DOCKER}\"\nOUTPUT_DIR_ON_HOST = PROJECT_DIR / \"output\"\nOUTPUT_PATH_ON_HOST = OUTPUT_DIR_ON_HOST / EXECUTABLE_NAME_IN_DOCKER\ndef run_command(command, check=True):\n    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)",
        "detail": "build",
        "documentation": {}
    },
    {
        "label": "DOCKERFILE_PATH",
        "kind": 5,
        "importPath": "build",
        "description": "build",
        "peekOfCode": "DOCKERFILE_PATH = PROJECT_DIR / \"Dockerfile\"\nIMAGE_NAME = \"multipackparser-builder\"\nEXECUTABLE_NAME_IN_DOCKER = \"MultipackParser\"\nEXECUTABLE_DIR_IN_DOCKER  = \"/app/dist\"\nEXECUTABLE_PATH_IN_DOCKER = f\"{EXECUTABLE_DIR_IN_DOCKER}/{EXECUTABLE_NAME_IN_DOCKER}\"\nOUTPUT_DIR_ON_HOST = PROJECT_DIR / \"output\"\nOUTPUT_PATH_ON_HOST = OUTPUT_DIR_ON_HOST / EXECUTABLE_NAME_IN_DOCKER\ndef run_command(command, check=True):\n    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    stdout, stderr = process.communicate()",
        "detail": "build",
        "documentation": {}
    },
    {
        "label": "IMAGE_NAME",
        "kind": 5,
        "importPath": "build",
        "description": "build",
        "peekOfCode": "IMAGE_NAME = \"multipackparser-builder\"\nEXECUTABLE_NAME_IN_DOCKER = \"MultipackParser\"\nEXECUTABLE_DIR_IN_DOCKER  = \"/app/dist\"\nEXECUTABLE_PATH_IN_DOCKER = f\"{EXECUTABLE_DIR_IN_DOCKER}/{EXECUTABLE_NAME_IN_DOCKER}\"\nOUTPUT_DIR_ON_HOST = PROJECT_DIR / \"output\"\nOUTPUT_PATH_ON_HOST = OUTPUT_DIR_ON_HOST / EXECUTABLE_NAME_IN_DOCKER\ndef run_command(command, check=True):\n    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    stdout, stderr = process.communicate()\n    if check and process.returncode != 0:",
        "detail": "build",
        "documentation": {}
    },
    {
        "label": "EXECUTABLE_NAME_IN_DOCKER",
        "kind": 5,
        "importPath": "build",
        "description": "build",
        "peekOfCode": "EXECUTABLE_NAME_IN_DOCKER = \"MultipackParser\"\nEXECUTABLE_DIR_IN_DOCKER  = \"/app/dist\"\nEXECUTABLE_PATH_IN_DOCKER = f\"{EXECUTABLE_DIR_IN_DOCKER}/{EXECUTABLE_NAME_IN_DOCKER}\"\nOUTPUT_DIR_ON_HOST = PROJECT_DIR / \"output\"\nOUTPUT_PATH_ON_HOST = OUTPUT_DIR_ON_HOST / EXECUTABLE_NAME_IN_DOCKER\ndef run_command(command, check=True):\n    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    stdout, stderr = process.communicate()\n    if check and process.returncode != 0:\n        raise Exception(f\"Command failed with error code {process.returncode}:\\n{stderr.decode('utf-8')}\")",
        "detail": "build",
        "documentation": {}
    },
    {
        "label": "EXECUTABLE_PATH_IN_DOCKER",
        "kind": 5,
        "importPath": "build",
        "description": "build",
        "peekOfCode": "EXECUTABLE_PATH_IN_DOCKER = f\"{EXECUTABLE_DIR_IN_DOCKER}/{EXECUTABLE_NAME_IN_DOCKER}\"\nOUTPUT_DIR_ON_HOST = PROJECT_DIR / \"output\"\nOUTPUT_PATH_ON_HOST = OUTPUT_DIR_ON_HOST / EXECUTABLE_NAME_IN_DOCKER\ndef run_command(command, check=True):\n    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    stdout, stderr = process.communicate()\n    if check and process.returncode != 0:\n        raise Exception(f\"Command failed with error code {process.returncode}:\\n{stderr.decode('utf-8')}\")\n    else:\n        return stdout.decode('utf-8')",
        "detail": "build",
        "documentation": {}
    },
    {
        "label": "OUTPUT_DIR_ON_HOST",
        "kind": 5,
        "importPath": "build",
        "description": "build",
        "peekOfCode": "OUTPUT_DIR_ON_HOST = PROJECT_DIR / \"output\"\nOUTPUT_PATH_ON_HOST = OUTPUT_DIR_ON_HOST / EXECUTABLE_NAME_IN_DOCKER\ndef run_command(command, check=True):\n    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    stdout, stderr = process.communicate()\n    if check and process.returncode != 0:\n        raise Exception(f\"Command failed with error code {process.returncode}:\\n{stderr.decode('utf-8')}\")\n    else:\n        return stdout.decode('utf-8')\ndef build_docker_image():",
        "detail": "build",
        "documentation": {}
    },
    {
        "label": "OUTPUT_PATH_ON_HOST",
        "kind": 5,
        "importPath": "build",
        "description": "build",
        "peekOfCode": "OUTPUT_PATH_ON_HOST = OUTPUT_DIR_ON_HOST / EXECUTABLE_NAME_IN_DOCKER\ndef run_command(command, check=True):\n    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    stdout, stderr = process.communicate()\n    if check and process.returncode != 0:\n        raise Exception(f\"Command failed with error code {process.returncode}:\\n{stderr.decode('utf-8')}\")\n    else:\n        return stdout.decode('utf-8')\ndef build_docker_image():\n    build_command = f\"docker buildx build --platform linux/arm64 -t {IMAGE_NAME} --output type=docker -f {DOCKERFILE_PATH} {PROJECT_DIR}\"",
        "detail": "build",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    \"\"\"Main function to run the application.\n    Returns:\n        int: The exit code of the application.\n    \"\"\"\n    try:\n        # Parse command line arguments\n        args = parse_arguments()\n        if args.version:\n            print(f\"Multipack Parser Application Version: {global_vars.VERSION}\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "__license__",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "__license__ = '''\n    Multipack Parser Application - to parse the data from the Multipack Robot to an UR Robot\n    Copyright (C) 2024  Yann-Luca Näher\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "os.environ[\"QT_IM_MODULE\"]",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "os.environ[\"QT_IM_MODULE\"] = \"qtvirtualkeyboard\"\nlogger = global_vars.logger\ndef main():\n    \"\"\"Main function to run the application.\n    Returns:\n        int: The exit code of the application.\n    \"\"\"\n    try:\n        # Parse command line arguments\n        args = parse_arguments()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "logger = global_vars.logger\ndef main():\n    \"\"\"Main function to run the application.\n    Returns:\n        int: The exit code of the application.\n    \"\"\"\n    try:\n        # Parse command line arguments\n        args = parse_arguments()\n        if args.version:",
        "detail": "main",
        "documentation": {}
    }
]